/// <reference types="react" />
import * as _backstage_core_plugin_api from '@backstage/core-plugin-api';
import { DiscoveryApi, FetchApi, IdentityApi, ApiHolder } from '@backstage/core-plugin-api';
import { ScmIntegrationRegistry } from '@backstage/integration';
import { Observable, JsonObject } from '@backstage/types';
import * as _backstage_plugin_scaffolder_react from '@backstage/plugin-scaffolder-react';
import { ScaffolderApi as ScaffolderApi$1, ScaffolderTask as ScaffolderTask$1, ScaffolderGetIntegrationsListOptions as ScaffolderGetIntegrationsListOptions$1, ScaffolderGetIntegrationsListResponse as ScaffolderGetIntegrationsListResponse$1, TemplateParameterSchema as TemplateParameterSchema$1, ScaffolderScaffoldOptions as ScaffolderScaffoldOptions$1, ScaffolderScaffoldResponse as ScaffolderScaffoldResponse$1, ScaffolderStreamLogsOptions as ScaffolderStreamLogsOptions$1, LogEvent as LogEvent$1, ScaffolderDryRunOptions as ScaffolderDryRunOptions$1, ScaffolderDryRunResponse as ScaffolderDryRunResponse$1, ListActionsResponse as ListActionsResponse$1, CustomFieldExtensionSchema as CustomFieldExtensionSchema$1, FieldExtensionComponentProps as FieldExtensionComponentProps$1, createScaffolderFieldExtension as createScaffolderFieldExtension$1, ScaffolderUseTemplateSecrets as ScaffolderUseTemplateSecrets$1, CustomFieldValidator as CustomFieldValidator$1, FieldExtensionOptions as FieldExtensionOptions$1, FieldExtensionComponent as FieldExtensionComponent$1, ScaffolderOutputLink, ScaffolderTaskOutput as ScaffolderTaskOutput$1, ScaffolderTaskStatus as ScaffolderTaskStatus$1, createScaffolderLayout as createScaffolderLayout$1, LayoutTemplate as LayoutTemplate$1, LayoutOptions as LayoutOptions$1 } from '@backstage/plugin-scaffolder-react';
import * as React from 'react';
import React__default, { ComponentType } from 'react';
import { Entity } from '@backstage/catalog-model';
import { TemplateEntityV1beta3 } from '@backstage/plugin-scaffolder-common';
import { UiSchema } from '@rjsf/utils';
import { z } from 'zod';
import { FieldValidation } from '@rjsf/core';

/**
 * An API to interact with the scaffolder backend.
 *
 * @public
 */
declare class ScaffolderClient implements ScaffolderApi$1 {
    private readonly discoveryApi;
    private readonly scmIntegrationsApi;
    private readonly fetchApi;
    private readonly identityApi?;
    private readonly useLongPollingLogs;
    constructor(options: {
        discoveryApi: DiscoveryApi;
        fetchApi: FetchApi;
        identityApi?: IdentityApi;
        scmIntegrationsApi: ScmIntegrationRegistry;
        useLongPollingLogs?: boolean;
    });
    listTasks(options: {
        filterByOwnership: 'owned' | 'all';
    }): Promise<{
        tasks: ScaffolderTask$1[];
    }>;
    getIntegrationsList(options: ScaffolderGetIntegrationsListOptions$1): Promise<ScaffolderGetIntegrationsListResponse$1>;
    getTemplateParameterSchema(templateRef: string): Promise<TemplateParameterSchema$1>;
    scaffold(options: ScaffolderScaffoldOptions$1): Promise<ScaffolderScaffoldResponse$1>;
    getTask(taskId: string): Promise<ScaffolderTask$1>;
    streamLogs(options: ScaffolderStreamLogsOptions$1): Observable<LogEvent$1>;
    dryRun(options: ScaffolderDryRunOptions$1): Promise<ScaffolderDryRunResponse$1>;
    private streamLogsEventStream;
    private streamLogsPolling;
    listActions(): Promise<ListActionsResponse$1>;
}

/**
 * The props for the Last Step in scaffolder template form.
 * Which represents the summary of the input provided by the end user.
 *
 * @public
 */
declare type ReviewStepProps = {
    disableButtons: boolean;
    formData: JsonObject;
    handleBack: () => void;
    handleReset: () => void;
    handleCreate: () => void;
    steps: {
        uiSchema: UiSchema;
        mergedSchema: JsonObject;
        schema: JsonObject;
    }[];
};

/**
 * The props for the entrypoint `ScaffolderPage` component the plugin.
 * @public
 */
declare type RouterProps = {
    components?: {
        ReviewStepComponent?: ComponentType<ReviewStepProps>;
        TemplateCardComponent?: ComponentType<{
            template: TemplateEntityV1beta3;
        }> | undefined;
        TaskPageComponent?: ComponentType<{}>;
    };
    groups?: Array<{
        title?: React__default.ReactNode;
        filter: (entity: Entity) => boolean;
    }>;
    defaultPreviewTemplate?: string;
    headerOptions?: {
        pageTitleOverride?: string;
        title?: string;
        subtitle?: string;
    };
    /**
     * Options for the context menu on the scaffolder page.
     */
    contextMenu?: {
        /** Whether to show a link to the template editor */
        editor?: boolean;
        /** Whether to show a link to the actions documentation */
        actions?: boolean;
    };
};

/**
 * The main plugin export for the scaffolder.
 * @public
 */
declare const scaffolderPlugin: _backstage_core_plugin_api.BackstagePlugin<{
    root: _backstage_core_plugin_api.RouteRef<undefined>;
    selectedTemplate: _backstage_core_plugin_api.SubRouteRef<_backstage_core_plugin_api.PathParams<"/templates/:namespace/:templateName">>;
    ongoingTask: _backstage_core_plugin_api.SubRouteRef<_backstage_core_plugin_api.PathParams<"/tasks/:taskId">>;
}, {
    registerComponent: _backstage_core_plugin_api.ExternalRouteRef<undefined, true>;
    viewTechDoc: _backstage_core_plugin_api.ExternalRouteRef<{
        name: string;
        kind: string;
        namespace: string;
    }, true>;
}, {}>;
/**
 * A field extension for selecting an Entity that exists in the Catalog.
 *
 * @public
 */
declare const EntityPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, {
    defaultKind?: string | undefined;
    defaultNamespace?: string | false | undefined;
    allowedKinds?: string[] | undefined;
    allowArbitraryValues?: boolean | undefined;
    catalogFilter?: Record<string, string | string[]> | Record<string, string | string[]>[] | undefined;
}>;
/**
 * The field extension for selecting a name for a new Entity in the Catalog.
 *
 * @public
 */
declare const EntityNamePickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, {}>;
/**
 * The field extension which provides the ability to select a RepositoryUrl.
 * Currently, this is an encoded URL that looks something like the following `github.com?repo=myRepoName&owner=backstage`.
 *
 * @public
 */
declare const RepoUrlPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, {
    allowedHosts?: string[] | undefined;
    allowedOrganizations?: string[] | undefined;
    allowedOwners?: string[] | undefined;
    allowedProjects?: string[] | undefined;
    allowedRepos?: string[] | undefined;
    requestUserCredentials?: {
        additionalScopes?: {
            azure?: string[] | undefined;
            github?: string[] | undefined;
            gitlab?: string[] | undefined;
            bitbucket?: string[] | undefined;
            gerrit?: string[] | undefined;
        } | undefined;
        secretsKey: string;
    } | undefined;
}>;
/**
 * A field extension for picking users and groups out of the Catalog.
 *
 * @public
 */
declare const OwnerPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, {
    defaultNamespace?: string | false | undefined;
    allowedKinds?: string[] | undefined;
    allowArbitraryValues?: boolean | undefined;
    catalogFilter?: Record<string, string | string[]> | Record<string, string | string[]>[] | undefined;
}>;
/**
 * The Router and main entrypoint to the Scaffolder plugin.
 *
 * @public
 */
declare const ScaffolderPage: (props: RouterProps) => JSX.Element;
/**
 * A field extension to show all the Entities that are owned by the current logged-in User for use in templates.
 *
 * @public
 */
declare const OwnedEntityPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string, {
    defaultKind?: string | undefined;
    defaultNamespace?: string | false | undefined;
    allowedKinds?: string[] | undefined;
    allowArbitraryValues?: boolean | undefined;
}>;
/**
 * EntityTagsPickerFieldExtension
 * @public
 */
declare const EntityTagsPickerFieldExtension: _backstage_plugin_scaffolder_react.FieldExtensionComponent<string[], {
    showCounts?: boolean | undefined;
    kinds?: string[] | undefined;
    helperText?: string | undefined;
}>;

/**
 * @public
 * FieldSchema encapsulates a JSONSchema7 along with the
 * matching FieldExtensionComponentProps type for a field extension.
 */
interface FieldSchema<TReturn, TUiOptions> {
    readonly schema: CustomFieldExtensionSchema$1;
    readonly type: FieldExtensionComponentProps$1<TReturn, TUiOptions>;
    readonly uiOptionsType: TUiOptions;
}
/**
 * @public
 * Utility function to convert zod return and UI options schemas to a
 * CustomFieldExtensionSchema with FieldExtensionComponentProps type inference
 */
declare function makeFieldSchemaFromZod<TReturnSchema extends z.ZodType, TUiOptionsSchema extends z.ZodType = z.ZodType<any, any, {}>>(returnSchema: TReturnSchema, uiOptionsSchema?: TUiOptionsSchema): FieldSchema<TReturnSchema extends z.ZodType<any, any, infer IReturn> ? IReturn : never, TUiOptionsSchema extends z.ZodType<any, any, infer IUiOptions> ? IUiOptions : never>;

/**
 * @public
 */
declare const EntityPickerFieldSchema: FieldSchema<string, {
    defaultKind?: string | undefined;
    defaultNamespace?: string | false | undefined;
    allowedKinds?: string[] | undefined;
    allowArbitraryValues?: boolean | undefined;
    catalogFilter?: Record<string, string | string[]> | Record<string, string | string[]>[] | undefined;
}>;
/**
 * The input props that can be specified under `ui:options` for the
 * `EntityPicker` field extension.
 *
 * @public
 */
declare type EntityPickerUiOptions = typeof EntityPickerFieldSchema.uiOptionsType;

/**
 * @public
 */
declare const OwnerPickerFieldSchema: FieldSchema<string, {
    defaultNamespace?: string | false | undefined;
    allowedKinds?: string[] | undefined;
    allowArbitraryValues?: boolean | undefined;
    catalogFilter?: Record<string, string | string[]> | Record<string, string | string[]>[] | undefined;
}>;
/**
 * The input props that can be specified under `ui:options` for the
 * `OwnerPicker` field extension.
 *
 * @public
 */
declare type OwnerPickerUiOptions = typeof OwnerPickerFieldSchema.uiOptionsType;

/**
 * @public
 */
declare const RepoUrlPickerFieldSchema: FieldSchema<string, {
    allowedHosts?: string[] | undefined;
    allowedOrganizations?: string[] | undefined;
    allowedOwners?: string[] | undefined;
    allowedProjects?: string[] | undefined;
    allowedRepos?: string[] | undefined;
    requestUserCredentials?: {
        additionalScopes?: {
            azure?: string[] | undefined;
            github?: string[] | undefined;
            gitlab?: string[] | undefined;
            bitbucket?: string[] | undefined;
            gerrit?: string[] | undefined;
        } | undefined;
        secretsKey: string;
    } | undefined;
}>;
/**
 * The input props that can be specified under `ui:options` for the
 * `RepoUrlPicker` field extension.
 *
 * @public
 */
declare type RepoUrlPickerUiOptions = typeof RepoUrlPickerFieldSchema.uiOptionsType;

/**
 * The validation function for the `repoUrl` that is returned from the
 * field extension. Ensures that you have all the required fields filled for
 * the different providers that exist.
 *
 * @public
 */
declare const repoPickerValidation: (value: string, validation: FieldValidation, context: {
    apiHolder: ApiHolder;
}) => void;

/**
 * @public
 */
declare const OwnedEntityPickerFieldSchema: FieldSchema<string, {
    defaultKind?: string | undefined;
    defaultNamespace?: string | false | undefined;
    allowedKinds?: string[] | undefined;
    allowArbitraryValues?: boolean | undefined;
}>;
/**
 * The input props that can be specified under `ui:options` for the
 * `OwnedEntityPicker` field extension.
 *
 * @public
 */
declare type OwnedEntityPickerUiOptions = typeof OwnedEntityPickerFieldSchema.uiOptionsType;

/**
 * @public
 */
declare const EntityTagsPickerFieldSchema: FieldSchema<string[], {
    showCounts?: boolean | undefined;
    kinds?: string[] | undefined;
    helperText?: string | undefined;
}>;
/**
 * The input props that can be specified under `ui:options` for the
 * `EntityTagsPicker` field extension.
 *
 * @public
 */
declare type EntityTagsPickerUiOptions = typeof EntityTagsPickerFieldSchema.uiOptionsType;

/**
 * The component to select the `type` of `Template` that you will see in the table.
 *
 * @public
 */
declare const TemplateTypePicker: () => JSX.Element | null;

/**
 * TaskPageProps for constructing a TaskPage
 * @param loadingText - Optional loading text shown before a task begins executing.
 *
 * @public
 */
declare type TaskPageProps = {
    loadingText?: string;
};
/**
 * TaskPage for showing the status of the taskId provided as a param
 * @param loadingText - Optional loading text shown before a task begins executing.
 *
 * @public
 */
declare const TaskPage: (props: TaskPageProps) => JSX.Element;

/**
 * @public
 * @deprecated use import from `{@link @backstage/plugin-scaffolder#scaffolderPlugin}.routes.root` instead.
 */
declare const rootRouteRef: _backstage_core_plugin_api.RouteRef<undefined>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#createScaffolderFieldExtension} instead as this has now been moved.
 */
declare const createScaffolderFieldExtension: typeof createScaffolderFieldExtension$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderFieldExtensions} instead as this has now been moved.
 */
declare const ScaffolderFieldExtensions: React.ComponentType<{
    children?: React.ReactNode;
}>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#useTemplateSecrets} instead as this has now been moved.
 */
declare const useTemplateSecrets: () => ScaffolderUseTemplateSecrets$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#scaffolderApiRef} instead as this has now been moved.
 */
declare const scaffolderApiRef: _backstage_core_plugin_api.ApiRef<ScaffolderApi$1>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderApi} instead as this has now been moved.
 */
declare type ScaffolderApi = ScaffolderApi$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderUseTemplateSecrets} instead as this has now been moved.
 */
declare type ScaffolderUseTemplateSecrets = ScaffolderUseTemplateSecrets$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#TemplateParameterSchema} instead as this has now been moved.
 */
declare type TemplateParameterSchema = TemplateParameterSchema$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#CustomFieldExtensionSchema} instead as this has now been moved.
 */
declare type CustomFieldExtensionSchema = CustomFieldExtensionSchema$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#CustomFieldValidator} instead as this has now been moved.
 */
declare type CustomFieldValidator<TReturnFieldData> = CustomFieldValidator$1<TReturnFieldData>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#FieldExtensionOptions} instead as this has now been moved.
 */
declare type FieldExtensionOptions = FieldExtensionOptions$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#FieldExtensionComponentProps} instead as this has now been moved.
 */
declare type FieldExtensionComponentProps<TFieldReturnValue, TUiOptions extends {} = {}> = FieldExtensionComponentProps$1<TFieldReturnValue, TUiOptions>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#FieldExtensionComponent} instead as this has now been moved.
 */
declare type FieldExtensionComponent<_TReturnValue, _TInputProps> = FieldExtensionComponent$1<_TReturnValue, _TInputProps>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ListActionsResponse} instead as this has now been moved.
 */
declare type ListActionsResponse = ListActionsResponse$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#LogEvent} instead as this has now been moved.
 */
declare type LogEvent = LogEvent$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderDryRunOptions} instead as this has now been moved.
 */
declare type ScaffolderDryRunOptions = ScaffolderDryRunOptions$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderDryRunResponse} instead as this has now been moved.
 */
declare type ScaffolderDryRunResponse = ScaffolderDryRunResponse$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderGetIntegrationsListOptions} instead as this has now been moved.
 */
declare type ScaffolderGetIntegrationsListOptions = ScaffolderGetIntegrationsListOptions$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderGetIntegrationsListResponse} instead as this has now been moved.
 */
declare type ScaffolderGetIntegrationsListResponse = ScaffolderGetIntegrationsListResponse$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderOutputlink} instead as this has now been moved.
 */
declare type ScaffolderOutputlink = ScaffolderOutputLink;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderScaffoldOptions} instead as this has now been moved.
 */
declare type ScaffolderScaffoldOptions = ScaffolderScaffoldOptions$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderScaffoldResponse} instead as this has now been moved.
 */
declare type ScaffolderScaffoldResponse = ScaffolderScaffoldResponse$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderStreamLogsOptions} instead as this has now been moved.
 */
declare type ScaffolderStreamLogsOptions = ScaffolderStreamLogsOptions$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderTask} instead as this has now been moved.
 */
declare type ScaffolderTask = ScaffolderTask$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderTaskOutput} instead as this has now been moved.
 */
declare type ScaffolderTaskOutput = ScaffolderTaskOutput$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderTaskStatus} instead as this has now been moved.
 */
declare type ScaffolderTaskStatus = ScaffolderTaskStatus$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#createScaffolderLayout} instead as this has now been moved.
 */
declare const createScaffolderLayout: typeof createScaffolderLayout$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#ScaffolderLayouts} instead as this has now been moved.
 */
declare const ScaffolderLayouts: React.ComponentType<{}>;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#LayoutTemplate} instead as this has now been moved.
 */
declare type LayoutTemplate = LayoutTemplate$1;
/**
 * @public
 * @deprecated use import from {@link @backstage/plugin-scaffolder-react#LayoutOptions} instead as this has now been moved.
 */
declare type LayoutOptions = LayoutOptions$1;

export { CustomFieldExtensionSchema, CustomFieldValidator, EntityNamePickerFieldExtension, EntityPickerFieldExtension, EntityPickerFieldSchema, EntityPickerUiOptions, EntityTagsPickerFieldExtension, EntityTagsPickerFieldSchema, EntityTagsPickerUiOptions, FieldExtensionComponent, FieldExtensionComponentProps, FieldExtensionOptions, FieldSchema, LayoutOptions, LayoutTemplate, ListActionsResponse, LogEvent, OwnedEntityPickerFieldExtension, OwnedEntityPickerFieldSchema, OwnedEntityPickerUiOptions, OwnerPickerFieldExtension, OwnerPickerFieldSchema, OwnerPickerUiOptions, RepoUrlPickerFieldExtension, RepoUrlPickerFieldSchema, RepoUrlPickerUiOptions, ReviewStepProps, RouterProps, ScaffolderApi, ScaffolderClient, ScaffolderDryRunOptions, ScaffolderDryRunResponse, ScaffolderFieldExtensions, ScaffolderGetIntegrationsListOptions, ScaffolderGetIntegrationsListResponse, ScaffolderLayouts, ScaffolderOutputlink, ScaffolderPage, ScaffolderScaffoldOptions, ScaffolderScaffoldResponse, ScaffolderStreamLogsOptions, ScaffolderTask, ScaffolderTaskOutput, ScaffolderTaskStatus, ScaffolderUseTemplateSecrets, TaskPage, TaskPageProps, TemplateParameterSchema, TemplateTypePicker, createScaffolderFieldExtension, createScaffolderLayout, makeFieldSchemaFromZod, repoPickerValidation, rootRouteRef, scaffolderApiRef, scaffolderPlugin, useTemplateSecrets };
