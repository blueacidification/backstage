{"version":3,"file":"static/module-lezer.1ca86dbb.js","mappings":"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","sources":["webpack://app/../../node_modules/@lezer/common/dist/index.js","webpack://app/../../node_modules/@lezer/highlight/dist/index.js"],"sourcesContent":["// FIXME profile adding a per-Tree TreeNode cache, validating it by\n// parent pointer\n/// The default maximum length of a `TreeBuffer` node.\nconst DefaultBufferLength = 1024;\nlet nextPropID = 0;\nclass Range {\n    constructor(from, to) {\n        this.from = from;\n        this.to = to;\n    }\n}\n/// Each [node type](#common.NodeType) or [individual tree](#common.Tree)\n/// can have metadata associated with it in props. Instances of this\n/// class represent prop names.\nclass NodeProp {\n    /// Create a new node prop type.\n    constructor(config = {}) {\n        this.id = nextPropID++;\n        this.perNode = !!config.perNode;\n        this.deserialize = config.deserialize || (() => {\n            throw new Error(\"This node type doesn't define a deserialize function\");\n        });\n    }\n    /// This is meant to be used with\n    /// [`NodeSet.extend`](#common.NodeSet.extend) or\n    /// [`LRParser.configure`](#lr.ParserConfig.props) to compute\n    /// prop values for each node type in the set. Takes a [match\n    /// object](#common.NodeType^match) or function that returns undefined\n    /// if the node type doesn't get this prop, and the prop's value if\n    /// it does.\n    add(match) {\n        if (this.perNode)\n            throw new RangeError(\"Can't add per-node props to node types\");\n        if (typeof match != \"function\")\n            match = NodeType.match(match);\n        return (type) => {\n            let result = match(type);\n            return result === undefined ? null : [this, result];\n        };\n    }\n}\n/// Prop that is used to describe matching delimiters. For opening\n/// delimiters, this holds an array of node names (written as a\n/// space-separated string when declaring this prop in a grammar)\n/// for the node types of closing delimiters that match it.\nNodeProp.closedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The inverse of [`closedBy`](#common.NodeProp^closedBy). This is\n/// attached to closing delimiters, holding an array of node names\n/// of types of matching opening delimiters.\nNodeProp.openedBy = new NodeProp({ deserialize: str => str.split(\" \") });\n/// Used to assign node types to groups (for example, all node\n/// types that represent an expression could be tagged with an\n/// `\"Expression\"` group).\nNodeProp.group = new NodeProp({ deserialize: str => str.split(\" \") });\n/// The hash of the [context](#lr.ContextTracker.constructor)\n/// that the node was parsed in, if any. Used to limit reuse of\n/// contextual nodes.\nNodeProp.contextHash = new NodeProp({ perNode: true });\n/// The distance beyond the end of the node that the tokenizer\n/// looked ahead for any of the tokens inside the node. (The LR\n/// parser only stores this when it is larger than 25, for\n/// efficiency reasons.)\nNodeProp.lookAhead = new NodeProp({ perNode: true });\n/// This per-node prop is used to replace a given node, or part of a\n/// node, with another tree. This is useful to include trees from\n/// different languages in mixed-language parsers.\nNodeProp.mounted = new NodeProp({ perNode: true });\n/// A mounted tree, which can be [stored](#common.NodeProp^mounted) on\n/// a tree node to indicate that parts of its content are\n/// represented by another tree.\nclass MountedTree {\n    constructor(\n    /// The inner tree.\n    tree, \n    /// If this is null, this tree replaces the entire node (it will\n    /// be included in the regular iteration instead of its host\n    /// node). If not, only the given ranges are considered to be\n    /// covered by this tree. This is used for trees that are mixed in\n    /// a way that isn't strictly hierarchical. Such mounted trees are\n    /// only entered by [`resolveInner`](#common.Tree.resolveInner)\n    /// and [`enter`](#common.SyntaxNode.enter).\n    overlay, \n    /// The parser used to create this subtree.\n    parser) {\n        this.tree = tree;\n        this.overlay = overlay;\n        this.parser = parser;\n    }\n}\nconst noProps = Object.create(null);\n/// Each node in a syntax tree has a node type associated with it.\nclass NodeType {\n    /// @internal\n    constructor(\n    /// The name of the node type. Not necessarily unique, but if the\n    /// grammar was written properly, different node types with the\n    /// same name within a node set should play the same semantic\n    /// role.\n    name, \n    /// @internal\n    props, \n    /// The id of this node in its set. Corresponds to the term ids\n    /// used in the parser.\n    id, \n    /// @internal\n    flags = 0) {\n        this.name = name;\n        this.props = props;\n        this.id = id;\n        this.flags = flags;\n    }\n    /// Define a node type.\n    static define(spec) {\n        let props = spec.props && spec.props.length ? Object.create(null) : noProps;\n        let flags = (spec.top ? 1 /* NodeFlag.Top */ : 0) | (spec.skipped ? 2 /* NodeFlag.Skipped */ : 0) |\n            (spec.error ? 4 /* NodeFlag.Error */ : 0) | (spec.name == null ? 8 /* NodeFlag.Anonymous */ : 0);\n        let type = new NodeType(spec.name || \"\", props, spec.id, flags);\n        if (spec.props)\n            for (let src of spec.props) {\n                if (!Array.isArray(src))\n                    src = src(type);\n                if (src) {\n                    if (src[0].perNode)\n                        throw new RangeError(\"Can't store a per-node prop on a node type\");\n                    props[src[0].id] = src[1];\n                }\n            }\n        return type;\n    }\n    /// Retrieves a node prop for this type. Will return `undefined` if\n    /// the prop isn't present on this node.\n    prop(prop) { return this.props[prop.id]; }\n    /// True when this is the top node of a grammar.\n    get isTop() { return (this.flags & 1 /* NodeFlag.Top */) > 0; }\n    /// True when this node is produced by a skip rule.\n    get isSkipped() { return (this.flags & 2 /* NodeFlag.Skipped */) > 0; }\n    /// Indicates whether this is an error node.\n    get isError() { return (this.flags & 4 /* NodeFlag.Error */) > 0; }\n    /// When true, this node type doesn't correspond to a user-declared\n    /// named node, for example because it is used to cache repetition.\n    get isAnonymous() { return (this.flags & 8 /* NodeFlag.Anonymous */) > 0; }\n    /// Returns true when this node's name or one of its\n    /// [groups](#common.NodeProp^group) matches the given string.\n    is(name) {\n        if (typeof name == 'string') {\n            if (this.name == name)\n                return true;\n            let group = this.prop(NodeProp.group);\n            return group ? group.indexOf(name) > -1 : false;\n        }\n        return this.id == name;\n    }\n    /// Create a function from node types to arbitrary values by\n    /// specifying an object whose property names are node or\n    /// [group](#common.NodeProp^group) names. Often useful with\n    /// [`NodeProp.add`](#common.NodeProp.add). You can put multiple\n    /// names, separated by spaces, in a single property name to map\n    /// multiple node names to a single value.\n    static match(map) {\n        let direct = Object.create(null);\n        for (let prop in map)\n            for (let name of prop.split(\" \"))\n                direct[name] = map[prop];\n        return (node) => {\n            for (let groups = node.prop(NodeProp.group), i = -1; i < (groups ? groups.length : 0); i++) {\n                let found = direct[i < 0 ? node.name : groups[i]];\n                if (found)\n                    return found;\n            }\n        };\n    }\n}\n/// An empty dummy node type to use when no actual type is available.\nNodeType.none = new NodeType(\"\", Object.create(null), 0, 8 /* NodeFlag.Anonymous */);\n/// A node set holds a collection of node types. It is used to\n/// compactly represent trees by storing their type ids, rather than a\n/// full pointer to the type object, in a numeric array. Each parser\n/// [has](#lr.LRParser.nodeSet) a node set, and [tree\n/// buffers](#common.TreeBuffer) can only store collections of nodes\n/// from the same set. A set can have a maximum of 2**16 (65536) node\n/// types in it, so that the ids fit into 16-bit typed array slots.\nclass NodeSet {\n    /// Create a set with the given types. The `id` property of each\n    /// type should correspond to its position within the array.\n    constructor(\n    /// The node types in this set, by id.\n    types) {\n        this.types = types;\n        for (let i = 0; i < types.length; i++)\n            if (types[i].id != i)\n                throw new RangeError(\"Node type ids should correspond to array positions when creating a node set\");\n    }\n    /// Create a copy of this set with some node properties added. The\n    /// arguments to this method can be created with\n    /// [`NodeProp.add`](#common.NodeProp.add).\n    extend(...props) {\n        let newTypes = [];\n        for (let type of this.types) {\n            let newProps = null;\n            for (let source of props) {\n                let add = source(type);\n                if (add) {\n                    if (!newProps)\n                        newProps = Object.assign({}, type.props);\n                    newProps[add[0].id] = add[1];\n                }\n            }\n            newTypes.push(newProps ? new NodeType(type.name, newProps, type.id, type.flags) : type);\n        }\n        return new NodeSet(newTypes);\n    }\n}\nconst CachedNode = new WeakMap(), CachedInnerNode = new WeakMap();\n/// Options that control iteration. Can be combined with the `|`\n/// operator to enable multiple ones.\nvar IterMode;\n(function (IterMode) {\n    /// When enabled, iteration will only visit [`Tree`](#common.Tree)\n    /// objects, not nodes packed into\n    /// [`TreeBuffer`](#common.TreeBuffer)s.\n    IterMode[IterMode[\"ExcludeBuffers\"] = 1] = \"ExcludeBuffers\";\n    /// Enable this to make iteration include anonymous nodes (such as\n    /// the nodes that wrap repeated grammar constructs into a balanced\n    /// tree).\n    IterMode[IterMode[\"IncludeAnonymous\"] = 2] = \"IncludeAnonymous\";\n    /// By default, regular [mounted](#common.NodeProp^mounted) nodes\n    /// replace their base node in iteration. Enable this to ignore them\n    /// instead.\n    IterMode[IterMode[\"IgnoreMounts\"] = 4] = \"IgnoreMounts\";\n    /// This option only applies in\n    /// [`enter`](#common.SyntaxNode.enter)-style methods. It tells the\n    /// library to not enter mounted overlays if one covers the given\n    /// position.\n    IterMode[IterMode[\"IgnoreOverlays\"] = 8] = \"IgnoreOverlays\";\n})(IterMode || (IterMode = {}));\n/// A piece of syntax tree. There are two ways to approach these\n/// trees: the way they are actually stored in memory, and the\n/// convenient way.\n///\n/// Syntax trees are stored as a tree of `Tree` and `TreeBuffer`\n/// objects. By packing detail information into `TreeBuffer` leaf\n/// nodes, the representation is made a lot more memory-efficient.\n///\n/// However, when you want to actually work with tree nodes, this\n/// representation is very awkward, so most client code will want to\n/// use the [`TreeCursor`](#common.TreeCursor) or\n/// [`SyntaxNode`](#common.SyntaxNode) interface instead, which provides\n/// a view on some part of this data structure, and can be used to\n/// move around to adjacent nodes.\nclass Tree {\n    /// Construct a new tree. See also [`Tree.build`](#common.Tree^build).\n    constructor(\n    /// The type of the top node.\n    type, \n    /// This node's child nodes.\n    children, \n    /// The positions (offsets relative to the start of this tree) of\n    /// the children.\n    positions, \n    /// The total length of this tree\n    length, \n    /// Per-node [node props](#common.NodeProp) to associate with this node.\n    props) {\n        this.type = type;\n        this.children = children;\n        this.positions = positions;\n        this.length = length;\n        /// @internal\n        this.props = null;\n        if (props && props.length) {\n            this.props = Object.create(null);\n            for (let [prop, value] of props)\n                this.props[typeof prop == \"number\" ? prop : prop.id] = value;\n        }\n    }\n    /// @internal\n    toString() {\n        let mounted = this.prop(NodeProp.mounted);\n        if (mounted && !mounted.overlay)\n            return mounted.tree.toString();\n        let children = \"\";\n        for (let ch of this.children) {\n            let str = ch.toString();\n            if (str) {\n                if (children)\n                    children += \",\";\n                children += str;\n            }\n        }\n        return !this.type.name ? children :\n            (/\\W/.test(this.type.name) && !this.type.isError ? JSON.stringify(this.type.name) : this.type.name) +\n                (children.length ? \"(\" + children + \")\" : \"\");\n    }\n    /// Get a [tree cursor](#common.TreeCursor) positioned at the top of\n    /// the tree. Mode can be used to [control](#common.IterMode) which\n    /// nodes the cursor visits.\n    cursor(mode = 0) {\n        return new TreeCursor(this.topNode, mode);\n    }\n    /// Get a [tree cursor](#common.TreeCursor) pointing into this tree\n    /// at the given position and side (see\n    /// [`moveTo`](#common.TreeCursor.moveTo).\n    cursorAt(pos, side = 0, mode = 0) {\n        let scope = CachedNode.get(this) || this.topNode;\n        let cursor = new TreeCursor(scope);\n        cursor.moveTo(pos, side);\n        CachedNode.set(this, cursor._tree);\n        return cursor;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) object for the top of the\n    /// tree.\n    get topNode() {\n        return new TreeNode(this, 0, 0, null);\n    }\n    /// Get the [syntax node](#common.SyntaxNode) at the given position.\n    /// If `side` is -1, this will move into nodes that end at the\n    /// position. If 1, it'll move into nodes that start at the\n    /// position. With 0, it'll only enter nodes that cover the position\n    /// from both sides.\n    ///\n    /// Note that this will not enter\n    /// [overlays](#common.MountedTree.overlay), and you often want\n    /// [`resolveInner`](#common.Tree.resolveInner) instead.\n    resolve(pos, side = 0) {\n        let node = resolveNode(CachedNode.get(this) || this.topNode, pos, side, false);\n        CachedNode.set(this, node);\n        return node;\n    }\n    /// Like [`resolve`](#common.Tree.resolve), but will enter\n    /// [overlaid](#common.MountedTree.overlay) nodes, producing a syntax node\n    /// pointing into the innermost overlaid tree at the given position\n    /// (with parent links going through all parent structure, including\n    /// the host trees).\n    resolveInner(pos, side = 0) {\n        let node = resolveNode(CachedInnerNode.get(this) || this.topNode, pos, side, true);\n        CachedInnerNode.set(this, node);\n        return node;\n    }\n    /// Iterate over the tree and its children, calling `enter` for any\n    /// node that touches the `from`/`to` region (if given) before\n    /// running over such a node's children, and `leave` (if given) when\n    /// leaving the node. When `enter` returns `false`, that node will\n    /// not have its children iterated over (or `leave` called).\n    iterate(spec) {\n        let { enter, leave, from = 0, to = this.length } = spec;\n        for (let c = this.cursor((spec.mode || 0) | IterMode.IncludeAnonymous);;) {\n            let entered = false;\n            if (c.from <= to && c.to >= from && (c.type.isAnonymous || enter(c) !== false)) {\n                if (c.firstChild())\n                    continue;\n                entered = true;\n            }\n            for (;;) {\n                if (entered && leave && !c.type.isAnonymous)\n                    leave(c);\n                if (c.nextSibling())\n                    break;\n                if (!c.parent())\n                    return;\n                entered = true;\n            }\n        }\n    }\n    /// Get the value of the given [node prop](#common.NodeProp) for this\n    /// node. Works with both per-node and per-type props.\n    prop(prop) {\n        return !prop.perNode ? this.type.prop(prop) : this.props ? this.props[prop.id] : undefined;\n    }\n    /// Returns the node's [per-node props](#common.NodeProp.perNode) in a\n    /// format that can be passed to the [`Tree`](#common.Tree)\n    /// constructor.\n    get propValues() {\n        let result = [];\n        if (this.props)\n            for (let id in this.props)\n                result.push([+id, this.props[id]]);\n        return result;\n    }\n    /// Balance the direct children of this tree, producing a copy of\n    /// which may have children grouped into subtrees with type\n    /// [`NodeType.none`](#common.NodeType^none).\n    balance(config = {}) {\n        return this.children.length <= 8 /* Balance.BranchFactor */ ? this :\n            balanceRange(NodeType.none, this.children, this.positions, 0, this.children.length, 0, this.length, (children, positions, length) => new Tree(this.type, children, positions, length, this.propValues), config.makeTree || ((children, positions, length) => new Tree(NodeType.none, children, positions, length)));\n    }\n    /// Build a tree from a postfix-ordered buffer of node information,\n    /// or a cursor over such a buffer.\n    static build(data) { return buildTree(data); }\n}\n/// The empty tree\nTree.empty = new Tree(NodeType.none, [], [], 0);\nclass FlatBufferCursor {\n    constructor(buffer, index) {\n        this.buffer = buffer;\n        this.index = index;\n    }\n    get id() { return this.buffer[this.index - 4]; }\n    get start() { return this.buffer[this.index - 3]; }\n    get end() { return this.buffer[this.index - 2]; }\n    get size() { return this.buffer[this.index - 1]; }\n    get pos() { return this.index; }\n    next() { this.index -= 4; }\n    fork() { return new FlatBufferCursor(this.buffer, this.index); }\n}\n/// Tree buffers contain (type, start, end, endIndex) quads for each\n/// node. In such a buffer, nodes are stored in prefix order (parents\n/// before children, with the endIndex of the parent indicating which\n/// children belong to it).\nclass TreeBuffer {\n    /// Create a tree buffer.\n    constructor(\n    /// The buffer's content.\n    buffer, \n    /// The total length of the group of nodes in the buffer.\n    length, \n    /// The node set used in this buffer.\n    set) {\n        this.buffer = buffer;\n        this.length = length;\n        this.set = set;\n    }\n    /// @internal\n    get type() { return NodeType.none; }\n    /// @internal\n    toString() {\n        let result = [];\n        for (let index = 0; index < this.buffer.length;) {\n            result.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result.join(\",\");\n    }\n    /// @internal\n    childString(index) {\n        let id = this.buffer[index], endIndex = this.buffer[index + 3];\n        let type = this.set.types[id], result = type.name;\n        if (/\\W/.test(result) && !type.isError)\n            result = JSON.stringify(result);\n        index += 4;\n        if (endIndex == index)\n            return result;\n        let children = [];\n        while (index < endIndex) {\n            children.push(this.childString(index));\n            index = this.buffer[index + 3];\n        }\n        return result + \"(\" + children.join(\",\") + \")\";\n    }\n    /// @internal\n    findChild(startIndex, endIndex, dir, pos, side) {\n        let { buffer } = this, pick = -1;\n        for (let i = startIndex; i != endIndex; i = buffer[i + 3]) {\n            if (checkSide(side, pos, buffer[i + 1], buffer[i + 2])) {\n                pick = i;\n                if (dir > 0)\n                    break;\n            }\n        }\n        return pick;\n    }\n    /// @internal\n    slice(startI, endI, from) {\n        let b = this.buffer;\n        let copy = new Uint16Array(endI - startI), len = 0;\n        for (let i = startI, j = 0; i < endI;) {\n            copy[j++] = b[i++];\n            copy[j++] = b[i++] - from;\n            let to = copy[j++] = b[i++] - from;\n            copy[j++] = b[i++] - startI;\n            len = Math.max(len, to);\n        }\n        return new TreeBuffer(copy, len, this.set);\n    }\n}\nfunction checkSide(side, pos, from, to) {\n    switch (side) {\n        case -2 /* Side.Before */: return from < pos;\n        case -1 /* Side.AtOrBefore */: return to >= pos && from < pos;\n        case 0 /* Side.Around */: return from < pos && to > pos;\n        case 1 /* Side.AtOrAfter */: return from <= pos && to > pos;\n        case 2 /* Side.After */: return to > pos;\n        case 4 /* Side.DontCare */: return true;\n    }\n}\nfunction enterUnfinishedNodesBefore(node, pos) {\n    let scan = node.childBefore(pos);\n    while (scan) {\n        let last = scan.lastChild;\n        if (!last || last.to != scan.to)\n            break;\n        if (last.type.isError && last.from == last.to) {\n            node = scan;\n            scan = last.prevSibling;\n        }\n        else {\n            scan = last;\n        }\n    }\n    return node;\n}\nfunction resolveNode(node, pos, side, overlays) {\n    var _a;\n    // Move up to a node that actually holds the position, if possible\n    while (node.from == node.to ||\n        (side < 1 ? node.from >= pos : node.from > pos) ||\n        (side > -1 ? node.to <= pos : node.to < pos)) {\n        let parent = !overlays && node instanceof TreeNode && node.index < 0 ? null : node.parent;\n        if (!parent)\n            return node;\n        node = parent;\n    }\n    let mode = overlays ? 0 : IterMode.IgnoreOverlays;\n    // Must go up out of overlays when those do not overlap with pos\n    if (overlays)\n        for (let scan = node, parent = scan.parent; parent; scan = parent, parent = scan.parent) {\n            if (scan instanceof TreeNode && scan.index < 0 && ((_a = parent.enter(pos, side, mode)) === null || _a === void 0 ? void 0 : _a.from) != scan.from)\n                node = parent;\n        }\n    for (;;) {\n        let inner = node.enter(pos, side, mode);\n        if (!inner)\n            return node;\n        node = inner;\n    }\n}\nclass TreeNode {\n    constructor(_tree, from, \n    // Index in parent node, set to -1 if the node is not a direct child of _parent.node (overlay)\n    index, _parent) {\n        this._tree = _tree;\n        this.from = from;\n        this.index = index;\n        this._parent = _parent;\n    }\n    get type() { return this._tree.type; }\n    get name() { return this._tree.type.name; }\n    get to() { return this.from + this._tree.length; }\n    nextChild(i, dir, pos, side, mode = 0) {\n        for (let parent = this;;) {\n            for (let { children, positions } = parent._tree, e = dir > 0 ? children.length : -1; i != e; i += dir) {\n                let next = children[i], start = positions[i] + parent.from;\n                if (!checkSide(side, pos, start, start + next.length))\n                    continue;\n                if (next instanceof TreeBuffer) {\n                    if (mode & IterMode.ExcludeBuffers)\n                        continue;\n                    let index = next.findChild(0, next.buffer.length, dir, pos - start, side);\n                    if (index > -1)\n                        return new BufferNode(new BufferContext(parent, next, i, start), null, index);\n                }\n                else if ((mode & IterMode.IncludeAnonymous) || (!next.type.isAnonymous || hasChild(next))) {\n                    let mounted;\n                    if (!(mode & IterMode.IgnoreMounts) &&\n                        next.props && (mounted = next.prop(NodeProp.mounted)) && !mounted.overlay)\n                        return new TreeNode(mounted.tree, start, i, parent);\n                    let inner = new TreeNode(next, start, i, parent);\n                    return (mode & IterMode.IncludeAnonymous) || !inner.type.isAnonymous ? inner\n                        : inner.nextChild(dir < 0 ? next.children.length - 1 : 0, dir, pos, side);\n                }\n            }\n            if ((mode & IterMode.IncludeAnonymous) || !parent.type.isAnonymous)\n                return null;\n            if (parent.index >= 0)\n                i = parent.index + dir;\n            else\n                i = dir < 0 ? -1 : parent._parent._tree.children.length;\n            parent = parent._parent;\n            if (!parent)\n                return null;\n        }\n    }\n    get firstChild() { return this.nextChild(0, 1, 0, 4 /* Side.DontCare */); }\n    get lastChild() { return this.nextChild(this._tree.children.length - 1, -1, 0, 4 /* Side.DontCare */); }\n    childAfter(pos) { return this.nextChild(0, 1, pos, 2 /* Side.After */); }\n    childBefore(pos) { return this.nextChild(this._tree.children.length - 1, -1, pos, -2 /* Side.Before */); }\n    enter(pos, side, mode = 0) {\n        let mounted;\n        if (!(mode & IterMode.IgnoreOverlays) && (mounted = this._tree.prop(NodeProp.mounted)) && mounted.overlay) {\n            let rPos = pos - this.from;\n            for (let { from, to } of mounted.overlay) {\n                if ((side > 0 ? from <= rPos : from < rPos) &&\n                    (side < 0 ? to >= rPos : to > rPos))\n                    return new TreeNode(mounted.tree, mounted.overlay[0].from + this.from, -1, this);\n            }\n        }\n        return this.nextChild(0, 1, pos, side, mode);\n    }\n    nextSignificantParent() {\n        let val = this;\n        while (val.type.isAnonymous && val._parent)\n            val = val._parent;\n        return val;\n    }\n    get parent() {\n        return this._parent ? this._parent.nextSignificantParent() : null;\n    }\n    get nextSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index + 1, 1, 0, 4 /* Side.DontCare */) : null;\n    }\n    get prevSibling() {\n        return this._parent && this.index >= 0 ? this._parent.nextChild(this.index - 1, -1, 0, 4 /* Side.DontCare */) : null;\n    }\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    get tree() { return this._tree; }\n    toTree() { return this._tree; }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    /// @internal\n    toString() { return this._tree.toString(); }\n    get node() { return this; }\n    matchContext(context) { return matchNodeContext(this, context); }\n}\nfunction getChildren(node, type, before, after) {\n    let cur = node.cursor(), result = [];\n    if (!cur.firstChild())\n        return result;\n    if (before != null)\n        while (!cur.type.is(before))\n            if (!cur.nextSibling())\n                return result;\n    for (;;) {\n        if (after != null && cur.type.is(after))\n            return result;\n        if (cur.type.is(type))\n            result.push(cur.node);\n        if (!cur.nextSibling())\n            return after == null ? result : [];\n    }\n}\nfunction matchNodeContext(node, context, i = context.length - 1) {\n    for (let p = node.parent; i >= 0; p = p.parent) {\n        if (!p)\n            return false;\n        if (!p.type.isAnonymous) {\n            if (context[i] && context[i] != p.name)\n                return false;\n            i--;\n        }\n    }\n    return true;\n}\nclass BufferContext {\n    constructor(parent, buffer, index, start) {\n        this.parent = parent;\n        this.buffer = buffer;\n        this.index = index;\n        this.start = start;\n    }\n}\nclass BufferNode {\n    get name() { return this.type.name; }\n    get from() { return this.context.start + this.context.buffer.buffer[this.index + 1]; }\n    get to() { return this.context.start + this.context.buffer.buffer[this.index + 2]; }\n    constructor(context, _parent, index) {\n        this.context = context;\n        this._parent = _parent;\n        this.index = index;\n        this.type = context.buffer.set.types[context.buffer.buffer[index]];\n    }\n    child(dir, pos, side) {\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get firstChild() { return this.child(1, 0, 4 /* Side.DontCare */); }\n    get lastChild() { return this.child(-1, 0, 4 /* Side.DontCare */); }\n    childAfter(pos) { return this.child(1, pos, 2 /* Side.After */); }\n    childBefore(pos) { return this.child(-1, pos, -2 /* Side.Before */); }\n    enter(pos, side, mode = 0) {\n        if (mode & IterMode.ExcludeBuffers)\n            return null;\n        let { buffer } = this.context;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], side > 0 ? 1 : -1, pos - this.context.start, side);\n        return index < 0 ? null : new BufferNode(this.context, this, index);\n    }\n    get parent() {\n        return this._parent || this.context.parent.nextSignificantParent();\n    }\n    externalSibling(dir) {\n        return this._parent ? null : this.context.parent.nextChild(this.context.index + dir, dir, 0, 4 /* Side.DontCare */);\n    }\n    get nextSibling() {\n        let { buffer } = this.context;\n        let after = buffer.buffer[this.index + 3];\n        if (after < (this._parent ? buffer.buffer[this._parent.index + 3] : buffer.buffer.length))\n            return new BufferNode(this.context, this._parent, after);\n        return this.externalSibling(1);\n    }\n    get prevSibling() {\n        let { buffer } = this.context;\n        let parentStart = this._parent ? this._parent.index + 4 : 0;\n        if (this.index == parentStart)\n            return this.externalSibling(-1);\n        return new BufferNode(this.context, this._parent, buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n    }\n    cursor(mode = 0) { return new TreeCursor(this, mode); }\n    get tree() { return null; }\n    toTree() {\n        let children = [], positions = [];\n        let { buffer } = this.context;\n        let startI = this.index + 4, endI = buffer.buffer[this.index + 3];\n        if (endI > startI) {\n            let from = buffer.buffer[this.index + 1];\n            children.push(buffer.slice(startI, endI, from));\n            positions.push(0);\n        }\n        return new Tree(this.type, children, positions, this.to - this.from);\n    }\n    resolve(pos, side = 0) {\n        return resolveNode(this, pos, side, false);\n    }\n    resolveInner(pos, side = 0) {\n        return resolveNode(this, pos, side, true);\n    }\n    enterUnfinishedNodesBefore(pos) { return enterUnfinishedNodesBefore(this, pos); }\n    /// @internal\n    toString() { return this.context.buffer.childString(this.index); }\n    getChild(type, before = null, after = null) {\n        let r = getChildren(this, type, before, after);\n        return r.length ? r[0] : null;\n    }\n    getChildren(type, before = null, after = null) {\n        return getChildren(this, type, before, after);\n    }\n    get node() { return this; }\n    matchContext(context) { return matchNodeContext(this, context); }\n}\n/// A tree cursor object focuses on a given node in a syntax tree, and\n/// allows you to move to adjacent nodes.\nclass TreeCursor {\n    /// Shorthand for `.type.name`.\n    get name() { return this.type.name; }\n    /// @internal\n    constructor(node, \n    /// @internal\n    mode = 0) {\n        this.mode = mode;\n        /// @internal\n        this.buffer = null;\n        this.stack = [];\n        /// @internal\n        this.index = 0;\n        this.bufferNode = null;\n        if (node instanceof TreeNode) {\n            this.yieldNode(node);\n        }\n        else {\n            this._tree = node.context.parent;\n            this.buffer = node.context;\n            for (let n = node._parent; n; n = n._parent)\n                this.stack.unshift(n.index);\n            this.bufferNode = node;\n            this.yieldBuf(node.index);\n        }\n    }\n    yieldNode(node) {\n        if (!node)\n            return false;\n        this._tree = node;\n        this.type = node.type;\n        this.from = node.from;\n        this.to = node.to;\n        return true;\n    }\n    yieldBuf(index, type) {\n        this.index = index;\n        let { start, buffer } = this.buffer;\n        this.type = type || buffer.set.types[buffer.buffer[index]];\n        this.from = start + buffer.buffer[index + 1];\n        this.to = start + buffer.buffer[index + 2];\n        return true;\n    }\n    yield(node) {\n        if (!node)\n            return false;\n        if (node instanceof TreeNode) {\n            this.buffer = null;\n            return this.yieldNode(node);\n        }\n        this.buffer = node.context;\n        return this.yieldBuf(node.index, node.type);\n    }\n    /// @internal\n    toString() {\n        return this.buffer ? this.buffer.buffer.childString(this.index) : this._tree.toString();\n    }\n    /// @internal\n    enterChild(dir, pos, side) {\n        if (!this.buffer)\n            return this.yield(this._tree.nextChild(dir < 0 ? this._tree._tree.children.length - 1 : 0, dir, pos, side, this.mode));\n        let { buffer } = this.buffer;\n        let index = buffer.findChild(this.index + 4, buffer.buffer[this.index + 3], dir, pos - this.buffer.start, side);\n        if (index < 0)\n            return false;\n        this.stack.push(this.index);\n        return this.yieldBuf(index);\n    }\n    /// Move the cursor to this node's first child. When this returns\n    /// false, the node has no child, and the cursor has not been moved.\n    firstChild() { return this.enterChild(1, 0, 4 /* Side.DontCare */); }\n    /// Move the cursor to this node's last child.\n    lastChild() { return this.enterChild(-1, 0, 4 /* Side.DontCare */); }\n    /// Move the cursor to the first child that ends after `pos`.\n    childAfter(pos) { return this.enterChild(1, pos, 2 /* Side.After */); }\n    /// Move to the last child that starts before `pos`.\n    childBefore(pos) { return this.enterChild(-1, pos, -2 /* Side.Before */); }\n    /// Move the cursor to the child around `pos`. If side is -1 the\n    /// child may end at that position, when 1 it may start there. This\n    /// will also enter [overlaid](#common.MountedTree.overlay)\n    /// [mounted](#common.NodeProp^mounted) trees unless `overlays` is\n    /// set to false.\n    enter(pos, side, mode = this.mode) {\n        if (!this.buffer)\n            return this.yield(this._tree.enter(pos, side, mode));\n        return mode & IterMode.ExcludeBuffers ? false : this.enterChild(1, pos, side);\n    }\n    /// Move to the node's parent node, if this isn't the top node.\n    parent() {\n        if (!this.buffer)\n            return this.yieldNode((this.mode & IterMode.IncludeAnonymous) ? this._tree._parent : this._tree.parent);\n        if (this.stack.length)\n            return this.yieldBuf(this.stack.pop());\n        let parent = (this.mode & IterMode.IncludeAnonymous) ? this.buffer.parent : this.buffer.parent.nextSignificantParent();\n        this.buffer = null;\n        return this.yieldNode(parent);\n    }\n    /// @internal\n    sibling(dir) {\n        if (!this.buffer)\n            return !this._tree._parent ? false\n                : this.yield(this._tree.index < 0 ? null\n                    : this._tree._parent.nextChild(this._tree.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode));\n        let { buffer } = this.buffer, d = this.stack.length - 1;\n        if (dir < 0) {\n            let parentStart = d < 0 ? 0 : this.stack[d] + 4;\n            if (this.index != parentStart)\n                return this.yieldBuf(buffer.findChild(parentStart, this.index, -1, 0, 4 /* Side.DontCare */));\n        }\n        else {\n            let after = buffer.buffer[this.index + 3];\n            if (after < (d < 0 ? buffer.buffer.length : buffer.buffer[this.stack[d] + 3]))\n                return this.yieldBuf(after);\n        }\n        return d < 0 ? this.yield(this.buffer.parent.nextChild(this.buffer.index + dir, dir, 0, 4 /* Side.DontCare */, this.mode)) : false;\n    }\n    /// Move to this node's next sibling, if any.\n    nextSibling() { return this.sibling(1); }\n    /// Move to this node's previous sibling, if any.\n    prevSibling() { return this.sibling(-1); }\n    atLastNode(dir) {\n        let index, parent, { buffer } = this;\n        if (buffer) {\n            if (dir > 0) {\n                if (this.index < buffer.buffer.buffer.length)\n                    return false;\n            }\n            else {\n                for (let i = 0; i < this.index; i++)\n                    if (buffer.buffer.buffer[i + 3] < this.index)\n                        return false;\n            }\n            ({ index, parent } = buffer);\n        }\n        else {\n            ({ index, _parent: parent } = this._tree);\n        }\n        for (; parent; { index, _parent: parent } = parent) {\n            if (index > -1)\n                for (let i = index + dir, e = dir < 0 ? -1 : parent._tree.children.length; i != e; i += dir) {\n                    let child = parent._tree.children[i];\n                    if ((this.mode & IterMode.IncludeAnonymous) ||\n                        child instanceof TreeBuffer ||\n                        !child.type.isAnonymous ||\n                        hasChild(child))\n                        return false;\n                }\n        }\n        return true;\n    }\n    move(dir, enter) {\n        if (enter && this.enterChild(dir, 0, 4 /* Side.DontCare */))\n            return true;\n        for (;;) {\n            if (this.sibling(dir))\n                return true;\n            if (this.atLastNode(dir) || !this.parent())\n                return false;\n        }\n    }\n    /// Move to the next node in a\n    /// [pre-order](https://en.wikipedia.org/wiki/Tree_traversal#Pre-order,_NLR)\n    /// traversal, going from a node to its first child or, if the\n    /// current node is empty or `enter` is false, its next sibling or\n    /// the next sibling of the first parent node that has one.\n    next(enter = true) { return this.move(1, enter); }\n    /// Move to the next node in a last-to-first pre-order traveral. A\n    /// node is followed by its last child or, if it has none, its\n    /// previous sibling or the previous sibling of the first parent\n    /// node that has one.\n    prev(enter = true) { return this.move(-1, enter); }\n    /// Move the cursor to the innermost node that covers `pos`. If\n    /// `side` is -1, it will enter nodes that end at `pos`. If it is 1,\n    /// it will enter nodes that start at `pos`.\n    moveTo(pos, side = 0) {\n        // Move up to a node that actually holds the position, if possible\n        while (this.from == this.to ||\n            (side < 1 ? this.from >= pos : this.from > pos) ||\n            (side > -1 ? this.to <= pos : this.to < pos))\n            if (!this.parent())\n                break;\n        // Then scan down into child nodes as far as possible\n        while (this.enterChild(1, pos, side)) { }\n        return this;\n    }\n    /// Get a [syntax node](#common.SyntaxNode) at the cursor's current\n    /// position.\n    get node() {\n        if (!this.buffer)\n            return this._tree;\n        let cache = this.bufferNode, result = null, depth = 0;\n        if (cache && cache.context == this.buffer) {\n            scan: for (let index = this.index, d = this.stack.length; d >= 0;) {\n                for (let c = cache; c; c = c._parent)\n                    if (c.index == index) {\n                        if (index == this.index)\n                            return c;\n                        result = c;\n                        depth = d + 1;\n                        break scan;\n                    }\n                index = this.stack[--d];\n            }\n        }\n        for (let i = depth; i < this.stack.length; i++)\n            result = new BufferNode(this.buffer, result, this.stack[i]);\n        return this.bufferNode = new BufferNode(this.buffer, result, this.index);\n    }\n    /// Get the [tree](#common.Tree) that represents the current node, if\n    /// any. Will return null when the node is in a [tree\n    /// buffer](#common.TreeBuffer).\n    get tree() {\n        return this.buffer ? null : this._tree._tree;\n    }\n    /// Iterate over the current node and all its descendants, calling\n    /// `enter` when entering a node and `leave`, if given, when leaving\n    /// one. When `enter` returns `false`, any children of that node are\n    /// skipped, and `leave` isn't called for it.\n    iterate(enter, leave) {\n        for (let depth = 0;;) {\n            let mustLeave = false;\n            if (this.type.isAnonymous || enter(this) !== false) {\n                if (this.firstChild()) {\n                    depth++;\n                    continue;\n                }\n                if (!this.type.isAnonymous)\n                    mustLeave = true;\n            }\n            for (;;) {\n                if (mustLeave && leave)\n                    leave(this);\n                mustLeave = this.type.isAnonymous;\n                if (this.nextSibling())\n                    break;\n                if (!depth)\n                    return;\n                this.parent();\n                depth--;\n                mustLeave = true;\n            }\n        }\n    }\n    /// Test whether the current node matches a given context—a sequence\n    /// of direct parent node names. Empty strings in the context array\n    /// are treated as wildcards.\n    matchContext(context) {\n        if (!this.buffer)\n            return matchNodeContext(this.node, context);\n        let { buffer } = this.buffer, { types } = buffer.set;\n        for (let i = context.length - 1, d = this.stack.length - 1; i >= 0; d--) {\n            if (d < 0)\n                return matchNodeContext(this.node, context, i);\n            let type = types[buffer.buffer[this.stack[d]]];\n            if (!type.isAnonymous) {\n                if (context[i] && context[i] != type.name)\n                    return false;\n                i--;\n            }\n        }\n        return true;\n    }\n}\nfunction hasChild(tree) {\n    return tree.children.some(ch => ch instanceof TreeBuffer || !ch.type.isAnonymous || hasChild(ch));\n}\nfunction buildTree(data) {\n    var _a;\n    let { buffer, nodeSet, maxBufferLength = DefaultBufferLength, reused = [], minRepeatType = nodeSet.types.length } = data;\n    let cursor = Array.isArray(buffer) ? new FlatBufferCursor(buffer, buffer.length) : buffer;\n    let types = nodeSet.types;\n    let contextHash = 0, lookAhead = 0;\n    function takeNode(parentStart, minPos, children, positions, inRepeat) {\n        let { id, start, end, size } = cursor;\n        let lookAheadAtStart = lookAhead;\n        while (size < 0) {\n            cursor.next();\n            if (size == -1 /* SpecialRecord.Reuse */) {\n                let node = reused[id];\n                children.push(node);\n                positions.push(start - parentStart);\n                return;\n            }\n            else if (size == -3 /* SpecialRecord.ContextChange */) { // Context change\n                contextHash = id;\n                return;\n            }\n            else if (size == -4 /* SpecialRecord.LookAhead */) {\n                lookAhead = id;\n                return;\n            }\n            else {\n                throw new RangeError(`Unrecognized record size: ${size}`);\n            }\n        }\n        let type = types[id], node, buffer;\n        let startPos = start - parentStart;\n        if (end - start <= maxBufferLength && (buffer = findBufferSize(cursor.pos - minPos, inRepeat))) {\n            // Small enough for a buffer, and no reused nodes inside\n            let data = new Uint16Array(buffer.size - buffer.skip);\n            let endPos = cursor.pos - buffer.size, index = data.length;\n            while (cursor.pos > endPos)\n                index = copyToBuffer(buffer.start, data, index);\n            node = new TreeBuffer(data, end - buffer.start, nodeSet);\n            startPos = buffer.start - parentStart;\n        }\n        else { // Make it a node\n            let endPos = cursor.pos - size;\n            cursor.next();\n            let localChildren = [], localPositions = [];\n            let localInRepeat = id >= minRepeatType ? id : -1;\n            let lastGroup = 0, lastEnd = end;\n            while (cursor.pos > endPos) {\n                if (localInRepeat >= 0 && cursor.id == localInRepeat && cursor.size >= 0) {\n                    if (cursor.end <= lastEnd - maxBufferLength) {\n                        makeRepeatLeaf(localChildren, localPositions, start, lastGroup, cursor.end, lastEnd, localInRepeat, lookAheadAtStart);\n                        lastGroup = localChildren.length;\n                        lastEnd = cursor.end;\n                    }\n                    cursor.next();\n                }\n                else {\n                    takeNode(start, endPos, localChildren, localPositions, localInRepeat);\n                }\n            }\n            if (localInRepeat >= 0 && lastGroup > 0 && lastGroup < localChildren.length)\n                makeRepeatLeaf(localChildren, localPositions, start, lastGroup, start, lastEnd, localInRepeat, lookAheadAtStart);\n            localChildren.reverse();\n            localPositions.reverse();\n            if (localInRepeat > -1 && lastGroup > 0) {\n                let make = makeBalanced(type);\n                node = balanceRange(type, localChildren, localPositions, 0, localChildren.length, 0, end - start, make, make);\n            }\n            else {\n                node = makeTree(type, localChildren, localPositions, end - start, lookAheadAtStart - end);\n            }\n        }\n        children.push(node);\n        positions.push(startPos);\n    }\n    function makeBalanced(type) {\n        return (children, positions, length) => {\n            let lookAhead = 0, lastI = children.length - 1, last, lookAheadProp;\n            if (lastI >= 0 && (last = children[lastI]) instanceof Tree) {\n                if (!lastI && last.type == type && last.length == length)\n                    return last;\n                if (lookAheadProp = last.prop(NodeProp.lookAhead))\n                    lookAhead = positions[lastI] + last.length + lookAheadProp;\n            }\n            return makeTree(type, children, positions, length, lookAhead);\n        };\n    }\n    function makeRepeatLeaf(children, positions, base, i, from, to, type, lookAhead) {\n        let localChildren = [], localPositions = [];\n        while (children.length > i) {\n            localChildren.push(children.pop());\n            localPositions.push(positions.pop() + base - from);\n        }\n        children.push(makeTree(nodeSet.types[type], localChildren, localPositions, to - from, lookAhead - to));\n        positions.push(from - base);\n    }\n    function makeTree(type, children, positions, length, lookAhead = 0, props) {\n        if (contextHash) {\n            let pair = [NodeProp.contextHash, contextHash];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        if (lookAhead > 25) {\n            let pair = [NodeProp.lookAhead, lookAhead];\n            props = props ? [pair].concat(props) : [pair];\n        }\n        return new Tree(type, children, positions, length, props);\n    }\n    function findBufferSize(maxSize, inRepeat) {\n        // Scan through the buffer to find previous siblings that fit\n        // together in a TreeBuffer, and don't contain any reused nodes\n        // (which can't be stored in a buffer).\n        // If `inRepeat` is > -1, ignore node boundaries of that type for\n        // nesting, but make sure the end falls either at the start\n        // (`maxSize`) or before such a node.\n        let fork = cursor.fork();\n        let size = 0, start = 0, skip = 0, minStart = fork.end - maxBufferLength;\n        let result = { size: 0, start: 0, skip: 0 };\n        scan: for (let minPos = fork.pos - maxSize; fork.pos > minPos;) {\n            let nodeSize = fork.size;\n            // Pretend nested repeat nodes of the same type don't exist\n            if (fork.id == inRepeat && nodeSize >= 0) {\n                // Except that we store the current state as a valid return\n                // value.\n                result.size = size;\n                result.start = start;\n                result.skip = skip;\n                skip += 4;\n                size += 4;\n                fork.next();\n                continue;\n            }\n            let startPos = fork.pos - nodeSize;\n            if (nodeSize < 0 || startPos < minPos || fork.start < minStart)\n                break;\n            let localSkipped = fork.id >= minRepeatType ? 4 : 0;\n            let nodeStart = fork.start;\n            fork.next();\n            while (fork.pos > startPos) {\n                if (fork.size < 0) {\n                    if (fork.size == -3 /* SpecialRecord.ContextChange */)\n                        localSkipped += 4;\n                    else\n                        break scan;\n                }\n                else if (fork.id >= minRepeatType) {\n                    localSkipped += 4;\n                }\n                fork.next();\n            }\n            start = nodeStart;\n            size += nodeSize;\n            skip += localSkipped;\n        }\n        if (inRepeat < 0 || size == maxSize) {\n            result.size = size;\n            result.start = start;\n            result.skip = skip;\n        }\n        return result.size > 4 ? result : undefined;\n    }\n    function copyToBuffer(bufferStart, buffer, index) {\n        let { id, start, end, size } = cursor;\n        cursor.next();\n        if (size >= 0 && id < minRepeatType) {\n            let startIndex = index;\n            if (size > 4) {\n                let endPos = cursor.pos - (size - 4);\n                while (cursor.pos > endPos)\n                    index = copyToBuffer(bufferStart, buffer, index);\n            }\n            buffer[--index] = startIndex;\n            buffer[--index] = end - bufferStart;\n            buffer[--index] = start - bufferStart;\n            buffer[--index] = id;\n        }\n        else if (size == -3 /* SpecialRecord.ContextChange */) {\n            contextHash = id;\n        }\n        else if (size == -4 /* SpecialRecord.LookAhead */) {\n            lookAhead = id;\n        }\n        return index;\n    }\n    let children = [], positions = [];\n    while (cursor.pos > 0)\n        takeNode(data.start || 0, data.bufferStart || 0, children, positions, -1);\n    let length = (_a = data.length) !== null && _a !== void 0 ? _a : (children.length ? positions[0] + children[0].length : 0);\n    return new Tree(types[data.topID], children.reverse(), positions.reverse(), length);\n}\nconst nodeSizeCache = new WeakMap;\nfunction nodeSize(balanceType, node) {\n    if (!balanceType.isAnonymous || node instanceof TreeBuffer || node.type != balanceType)\n        return 1;\n    let size = nodeSizeCache.get(node);\n    if (size == null) {\n        size = 1;\n        for (let child of node.children) {\n            if (child.type != balanceType || !(child instanceof Tree)) {\n                size = 1;\n                break;\n            }\n            size += nodeSize(balanceType, child);\n        }\n        nodeSizeCache.set(node, size);\n    }\n    return size;\n}\nfunction balanceRange(\n// The type the balanced tree's inner nodes.\nbalanceType, \n// The direct children and their positions\nchildren, positions, \n// The index range in children/positions to use\nfrom, to, \n// The start position of the nodes, relative to their parent.\nstart, \n// Length of the outer node\nlength, \n// Function to build the top node of the balanced tree\nmkTop, \n// Function to build internal nodes for the balanced tree\nmkTree) {\n    let total = 0;\n    for (let i = from; i < to; i++)\n        total += nodeSize(balanceType, children[i]);\n    let maxChild = Math.ceil((total * 1.5) / 8 /* Balance.BranchFactor */);\n    let localChildren = [], localPositions = [];\n    function divide(children, positions, from, to, offset) {\n        for (let i = from; i < to;) {\n            let groupFrom = i, groupStart = positions[i], groupSize = nodeSize(balanceType, children[i]);\n            i++;\n            for (; i < to; i++) {\n                let nextSize = nodeSize(balanceType, children[i]);\n                if (groupSize + nextSize >= maxChild)\n                    break;\n                groupSize += nextSize;\n            }\n            if (i == groupFrom + 1) {\n                if (groupSize > maxChild) {\n                    let only = children[groupFrom]; // Only trees can have a size > 1\n                    divide(only.children, only.positions, 0, only.children.length, positions[groupFrom] + offset);\n                    continue;\n                }\n                localChildren.push(children[groupFrom]);\n            }\n            else {\n                let length = positions[i - 1] + children[i - 1].length - groupStart;\n                localChildren.push(balanceRange(balanceType, children, positions, groupFrom, i, groupStart, length, null, mkTree));\n            }\n            localPositions.push(groupStart + offset - start);\n        }\n    }\n    divide(children, positions, from, to, 0);\n    return (mkTop || mkTree)(localChildren, localPositions, length);\n}\n/// Provides a way to associate values with pieces of trees. As long\n/// as that part of the tree is reused, the associated values can be\n/// retrieved from an updated tree.\nclass NodeWeakMap {\n    constructor() {\n        this.map = new WeakMap();\n    }\n    setBuffer(buffer, index, value) {\n        let inner = this.map.get(buffer);\n        if (!inner)\n            this.map.set(buffer, inner = new Map);\n        inner.set(index, value);\n    }\n    getBuffer(buffer, index) {\n        let inner = this.map.get(buffer);\n        return inner && inner.get(index);\n    }\n    /// Set the value for this syntax node.\n    set(node, value) {\n        if (node instanceof BufferNode)\n            this.setBuffer(node.context.buffer, node.index, value);\n        else if (node instanceof TreeNode)\n            this.map.set(node.tree, value);\n    }\n    /// Retrieve value for this syntax node, if it exists in the map.\n    get(node) {\n        return node instanceof BufferNode ? this.getBuffer(node.context.buffer, node.index)\n            : node instanceof TreeNode ? this.map.get(node.tree) : undefined;\n    }\n    /// Set the value for the node that a cursor currently points to.\n    cursorSet(cursor, value) {\n        if (cursor.buffer)\n            this.setBuffer(cursor.buffer.buffer, cursor.index, value);\n        else\n            this.map.set(cursor.tree, value);\n    }\n    /// Retrieve the value for the node that a cursor currently points\n    /// to.\n    cursorGet(cursor) {\n        return cursor.buffer ? this.getBuffer(cursor.buffer.buffer, cursor.index) : this.map.get(cursor.tree);\n    }\n}\n\n/// Tree fragments are used during [incremental\n/// parsing](#common.Parser.startParse) to track parts of old trees\n/// that can be reused in a new parse. An array of fragments is used\n/// to track regions of an old tree whose nodes might be reused in new\n/// parses. Use the static\n/// [`applyChanges`](#common.TreeFragment^applyChanges) method to\n/// update fragments for document changes.\nclass TreeFragment {\n    /// Construct a tree fragment. You'll usually want to use\n    /// [`addTree`](#common.TreeFragment^addTree) and\n    /// [`applyChanges`](#common.TreeFragment^applyChanges) instead of\n    /// calling this directly.\n    constructor(\n    /// The start of the unchanged range pointed to by this fragment.\n    /// This refers to an offset in the _updated_ document (as opposed\n    /// to the original tree).\n    from, \n    /// The end of the unchanged range.\n    to, \n    /// The tree that this fragment is based on.\n    tree, \n    /// The offset between the fragment's tree and the document that\n    /// this fragment can be used against. Add this when going from\n    /// document to tree positions, subtract it to go from tree to\n    /// document positions.\n    offset, openStart = false, openEnd = false) {\n        this.from = from;\n        this.to = to;\n        this.tree = tree;\n        this.offset = offset;\n        this.open = (openStart ? 1 /* Open.Start */ : 0) | (openEnd ? 2 /* Open.End */ : 0);\n    }\n    /// Whether the start of the fragment represents the start of a\n    /// parse, or the end of a change. (In the second case, it may not\n    /// be safe to reuse some nodes at the start, depending on the\n    /// parsing algorithm.)\n    get openStart() { return (this.open & 1 /* Open.Start */) > 0; }\n    /// Whether the end of the fragment represents the end of a\n    /// full-document parse, or the start of a change.\n    get openEnd() { return (this.open & 2 /* Open.End */) > 0; }\n    /// Create a set of fragments from a freshly parsed tree, or update\n    /// an existing set of fragments by replacing the ones that overlap\n    /// with a tree with content from the new tree. When `partial` is\n    /// true, the parse is treated as incomplete, and the resulting\n    /// fragment has [`openEnd`](#common.TreeFragment.openEnd) set to\n    /// true.\n    static addTree(tree, fragments = [], partial = false) {\n        let result = [new TreeFragment(0, tree.length, tree, 0, false, partial)];\n        for (let f of fragments)\n            if (f.to > tree.length)\n                result.push(f);\n        return result;\n    }\n    /// Apply a set of edits to an array of fragments, removing or\n    /// splitting fragments as necessary to remove edited ranges, and\n    /// adjusting offsets for fragments that moved.\n    static applyChanges(fragments, changes, minGap = 128) {\n        if (!changes.length)\n            return fragments;\n        let result = [];\n        let fI = 1, nextF = fragments.length ? fragments[0] : null;\n        for (let cI = 0, pos = 0, off = 0;; cI++) {\n            let nextC = cI < changes.length ? changes[cI] : null;\n            let nextPos = nextC ? nextC.fromA : 1e9;\n            if (nextPos - pos >= minGap)\n                while (nextF && nextF.from < nextPos) {\n                    let cut = nextF;\n                    if (pos >= cut.from || nextPos <= cut.to || off) {\n                        let fFrom = Math.max(cut.from, pos) - off, fTo = Math.min(cut.to, nextPos) - off;\n                        cut = fFrom >= fTo ? null : new TreeFragment(fFrom, fTo, cut.tree, cut.offset + off, cI > 0, !!nextC);\n                    }\n                    if (cut)\n                        result.push(cut);\n                    if (nextF.to > nextPos)\n                        break;\n                    nextF = fI < fragments.length ? fragments[fI++] : null;\n                }\n            if (!nextC)\n                break;\n            pos = nextC.toA;\n            off = nextC.toA - nextC.toB;\n        }\n        return result;\n    }\n}\n/// A superclass that parsers should extend.\nclass Parser {\n    /// Start a parse, returning a [partial parse](#common.PartialParse)\n    /// object. [`fragments`](#common.TreeFragment) can be passed in to\n    /// make the parse incremental.\n    ///\n    /// By default, the entire input is parsed. You can pass `ranges`,\n    /// which should be a sorted array of non-empty, non-overlapping\n    /// ranges, to parse only those ranges. The tree returned in that\n    /// case will start at `ranges[0].from`.\n    startParse(input, fragments, ranges) {\n        if (typeof input == \"string\")\n            input = new StringInput(input);\n        ranges = !ranges ? [new Range(0, input.length)] : ranges.length ? ranges.map(r => new Range(r.from, r.to)) : [new Range(0, 0)];\n        return this.createParse(input, fragments || [], ranges);\n    }\n    /// Run a full parse, returning the resulting tree.\n    parse(input, fragments, ranges) {\n        let parse = this.startParse(input, fragments, ranges);\n        for (;;) {\n            let done = parse.advance();\n            if (done)\n                return done;\n        }\n    }\n}\nclass StringInput {\n    constructor(string) {\n        this.string = string;\n    }\n    get length() { return this.string.length; }\n    chunk(from) { return this.string.slice(from); }\n    get lineChunks() { return false; }\n    read(from, to) { return this.string.slice(from, to); }\n}\n\n/// Create a parse wrapper that, after the inner parse completes,\n/// scans its tree for mixed language regions with the `nest`\n/// function, runs the resulting [inner parses](#common.NestedParse),\n/// and then [mounts](#common.NodeProp^mounted) their results onto the\n/// tree.\nfunction parseMixed(nest) {\n    return (parse, input, fragments, ranges) => new MixedParse(parse, nest, input, fragments, ranges);\n}\nclass InnerParse {\n    constructor(parser, parse, overlay, target, ranges) {\n        this.parser = parser;\n        this.parse = parse;\n        this.overlay = overlay;\n        this.target = target;\n        this.ranges = ranges;\n    }\n}\nclass ActiveOverlay {\n    constructor(parser, predicate, mounts, index, start, target, prev) {\n        this.parser = parser;\n        this.predicate = predicate;\n        this.mounts = mounts;\n        this.index = index;\n        this.start = start;\n        this.target = target;\n        this.prev = prev;\n        this.depth = 0;\n        this.ranges = [];\n    }\n}\nconst stoppedInner = new NodeProp({ perNode: true });\nclass MixedParse {\n    constructor(base, nest, input, fragments, ranges) {\n        this.nest = nest;\n        this.input = input;\n        this.fragments = fragments;\n        this.ranges = ranges;\n        this.inner = [];\n        this.innerDone = 0;\n        this.baseTree = null;\n        this.stoppedAt = null;\n        this.baseParse = base;\n    }\n    advance() {\n        if (this.baseParse) {\n            let done = this.baseParse.advance();\n            if (!done)\n                return null;\n            this.baseParse = null;\n            this.baseTree = done;\n            this.startInner();\n            if (this.stoppedAt != null)\n                for (let inner of this.inner)\n                    inner.parse.stopAt(this.stoppedAt);\n        }\n        if (this.innerDone == this.inner.length) {\n            let result = this.baseTree;\n            if (this.stoppedAt != null)\n                result = new Tree(result.type, result.children, result.positions, result.length, result.propValues.concat([[stoppedInner, this.stoppedAt]]));\n            return result;\n        }\n        let inner = this.inner[this.innerDone], done = inner.parse.advance();\n        if (done) {\n            this.innerDone++;\n            // This is a somewhat dodgy but super helpful hack where we\n            // patch up nodes created by the inner parse (and thus\n            // presumably not aliased anywhere else) to hold the information\n            // about the inner parse.\n            let props = Object.assign(Object.create(null), inner.target.props);\n            props[NodeProp.mounted.id] = new MountedTree(done, inner.overlay, inner.parser);\n            inner.target.props = props;\n        }\n        return null;\n    }\n    get parsedPos() {\n        if (this.baseParse)\n            return 0;\n        let pos = this.input.length;\n        for (let i = this.innerDone; i < this.inner.length; i++) {\n            if (this.inner[i].ranges[0].from < pos)\n                pos = Math.min(pos, this.inner[i].parse.parsedPos);\n        }\n        return pos;\n    }\n    stopAt(pos) {\n        this.stoppedAt = pos;\n        if (this.baseParse)\n            this.baseParse.stopAt(pos);\n        else\n            for (let i = this.innerDone; i < this.inner.length; i++)\n                this.inner[i].parse.stopAt(pos);\n    }\n    startInner() {\n        let fragmentCursor = new FragmentCursor(this.fragments);\n        let overlay = null;\n        let covered = null;\n        let cursor = new TreeCursor(new TreeNode(this.baseTree, this.ranges[0].from, 0, null), IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n        scan: for (let nest, isCovered; this.stoppedAt == null || cursor.from < this.stoppedAt;) {\n            let enter = true, range;\n            if (fragmentCursor.hasNode(cursor)) {\n                if (overlay) {\n                    let match = overlay.mounts.find(m => m.frag.from <= cursor.from && m.frag.to >= cursor.to && m.mount.overlay);\n                    if (match)\n                        for (let r of match.mount.overlay) {\n                            let from = r.from + match.pos, to = r.to + match.pos;\n                            if (from >= cursor.from && to <= cursor.to && !overlay.ranges.some(r => r.from < to && r.to > from))\n                                overlay.ranges.push({ from, to });\n                        }\n                }\n                enter = false;\n            }\n            else if (covered && (isCovered = checkCover(covered.ranges, cursor.from, cursor.to))) {\n                enter = isCovered != 2 /* Cover.Full */;\n            }\n            else if (!cursor.type.isAnonymous && cursor.from < cursor.to && (nest = this.nest(cursor, this.input))) {\n                if (!cursor.tree)\n                    materialize(cursor);\n                let oldMounts = fragmentCursor.findMounts(cursor.from, nest.parser);\n                if (typeof nest.overlay == \"function\") {\n                    overlay = new ActiveOverlay(nest.parser, nest.overlay, oldMounts, this.inner.length, cursor.from, cursor.tree, overlay);\n                }\n                else {\n                    let ranges = punchRanges(this.ranges, nest.overlay || [new Range(cursor.from, cursor.to)]);\n                    if (ranges.length)\n                        this.inner.push(new InnerParse(nest.parser, nest.parser.startParse(this.input, enterFragments(oldMounts, ranges), ranges), nest.overlay ? nest.overlay.map(r => new Range(r.from - cursor.from, r.to - cursor.from)) : null, cursor.tree, ranges));\n                    if (!nest.overlay)\n                        enter = false;\n                    else if (ranges.length)\n                        covered = { ranges, depth: 0, prev: covered };\n                }\n            }\n            else if (overlay && (range = overlay.predicate(cursor))) {\n                if (range === true)\n                    range = new Range(cursor.from, cursor.to);\n                if (range.from < range.to)\n                    overlay.ranges.push(range);\n            }\n            if (enter && cursor.firstChild()) {\n                if (overlay)\n                    overlay.depth++;\n                if (covered)\n                    covered.depth++;\n            }\n            else {\n                for (;;) {\n                    if (cursor.nextSibling())\n                        break;\n                    if (!cursor.parent())\n                        break scan;\n                    if (overlay && !--overlay.depth) {\n                        let ranges = punchRanges(this.ranges, overlay.ranges);\n                        if (ranges.length)\n                            this.inner.splice(overlay.index, 0, new InnerParse(overlay.parser, overlay.parser.startParse(this.input, enterFragments(overlay.mounts, ranges), ranges), overlay.ranges.map(r => new Range(r.from - overlay.start, r.to - overlay.start)), overlay.target, ranges));\n                        overlay = overlay.prev;\n                    }\n                    if (covered && !--covered.depth)\n                        covered = covered.prev;\n                }\n            }\n        }\n    }\n}\nfunction checkCover(covered, from, to) {\n    for (let range of covered) {\n        if (range.from >= to)\n            break;\n        if (range.to > from)\n            return range.from <= from && range.to >= to ? 2 /* Cover.Full */ : 1 /* Cover.Partial */;\n    }\n    return 0 /* Cover.None */;\n}\n// Take a piece of buffer and convert it into a stand-alone\n// TreeBuffer.\nfunction sliceBuf(buf, startI, endI, nodes, positions, off) {\n    if (startI < endI) {\n        let from = buf.buffer[startI + 1];\n        nodes.push(buf.slice(startI, endI, from));\n        positions.push(from - off);\n    }\n}\n// This function takes a node that's in a buffer, and converts it, and\n// its parent buffer nodes, into a Tree. This is again acting on the\n// assumption that the trees and buffers have been constructed by the\n// parse that was ran via the mix parser, and thus aren't shared with\n// any other code, making violations of the immutability safe.\nfunction materialize(cursor) {\n    let { node } = cursor, depth = 0;\n    // Scan up to the nearest tree\n    do {\n        cursor.parent();\n        depth++;\n    } while (!cursor.tree);\n    // Find the index of the buffer in that tree\n    let i = 0, base = cursor.tree, off = 0;\n    for (;; i++) {\n        off = base.positions[i] + cursor.from;\n        if (off <= node.from && off + base.children[i].length >= node.to)\n            break;\n    }\n    let buf = base.children[i], b = buf.buffer;\n    // Split a level in the buffer, putting the nodes before and after\n    // the child that contains `node` into new buffers.\n    function split(startI, endI, type, innerOffset, length) {\n        let i = startI;\n        while (b[i + 2] + off <= node.from)\n            i = b[i + 3];\n        let children = [], positions = [];\n        sliceBuf(buf, startI, i, children, positions, innerOffset);\n        let from = b[i + 1], to = b[i + 2];\n        let isTarget = from + off == node.from && to + off == node.to && b[i] == node.type.id;\n        children.push(isTarget ? node.toTree() : split(i + 4, b[i + 3], buf.set.types[b[i]], from, to - from));\n        positions.push(from - innerOffset);\n        sliceBuf(buf, b[i + 3], endI, children, positions, innerOffset);\n        return new Tree(type, children, positions, length);\n    }\n    base.children[i] = split(0, b.length, NodeType.none, 0, buf.length);\n    // Move the cursor back to the target node\n    for (let d = 0; d <= depth; d++)\n        cursor.childAfter(node.from);\n}\nclass StructureCursor {\n    constructor(root, offset) {\n        this.offset = offset;\n        this.done = false;\n        this.cursor = root.cursor(IterMode.IncludeAnonymous | IterMode.IgnoreMounts);\n    }\n    // Move to the first node (in pre-order) that starts at or after `pos`.\n    moveTo(pos) {\n        let { cursor } = this, p = pos - this.offset;\n        while (!this.done && cursor.from < p) {\n            if (cursor.to >= pos && cursor.enter(p, 1, IterMode.IgnoreOverlays | IterMode.ExcludeBuffers)) ;\n            else if (!cursor.next(false))\n                this.done = true;\n        }\n    }\n    hasNode(cursor) {\n        this.moveTo(cursor.from);\n        if (!this.done && this.cursor.from + this.offset == cursor.from && this.cursor.tree) {\n            for (let tree = this.cursor.tree;;) {\n                if (tree == cursor.tree)\n                    return true;\n                if (tree.children.length && tree.positions[0] == 0 && tree.children[0] instanceof Tree)\n                    tree = tree.children[0];\n                else\n                    break;\n            }\n        }\n        return false;\n    }\n}\nclass FragmentCursor {\n    constructor(fragments) {\n        var _a;\n        this.fragments = fragments;\n        this.curTo = 0;\n        this.fragI = 0;\n        if (fragments.length) {\n            let first = this.curFrag = fragments[0];\n            this.curTo = (_a = first.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : first.to;\n            this.inner = new StructureCursor(first.tree, -first.offset);\n        }\n        else {\n            this.curFrag = this.inner = null;\n        }\n    }\n    hasNode(node) {\n        while (this.curFrag && node.from >= this.curTo)\n            this.nextFrag();\n        return this.curFrag && this.curFrag.from <= node.from && this.curTo >= node.to && this.inner.hasNode(node);\n    }\n    nextFrag() {\n        var _a;\n        this.fragI++;\n        if (this.fragI == this.fragments.length) {\n            this.curFrag = this.inner = null;\n        }\n        else {\n            let frag = this.curFrag = this.fragments[this.fragI];\n            this.curTo = (_a = frag.tree.prop(stoppedInner)) !== null && _a !== void 0 ? _a : frag.to;\n            this.inner = new StructureCursor(frag.tree, -frag.offset);\n        }\n    }\n    findMounts(pos, parser) {\n        var _a;\n        let result = [];\n        if (this.inner) {\n            this.inner.cursor.moveTo(pos, 1);\n            for (let pos = this.inner.cursor.node; pos; pos = pos.parent) {\n                let mount = (_a = pos.tree) === null || _a === void 0 ? void 0 : _a.prop(NodeProp.mounted);\n                if (mount && mount.parser == parser) {\n                    for (let i = this.fragI; i < this.fragments.length; i++) {\n                        let frag = this.fragments[i];\n                        if (frag.from >= pos.to)\n                            break;\n                        if (frag.tree == this.curFrag.tree)\n                            result.push({\n                                frag,\n                                pos: pos.from - frag.offset,\n                                mount\n                            });\n                    }\n                }\n            }\n        }\n        return result;\n    }\n}\nfunction punchRanges(outer, ranges) {\n    let copy = null, current = ranges;\n    for (let i = 1, j = 0; i < outer.length; i++) {\n        let gapFrom = outer[i - 1].to, gapTo = outer[i].from;\n        for (; j < current.length; j++) {\n            let r = current[j];\n            if (r.from >= gapTo)\n                break;\n            if (r.to <= gapFrom)\n                continue;\n            if (!copy)\n                current = copy = ranges.slice();\n            if (r.from < gapFrom) {\n                copy[j] = new Range(r.from, gapFrom);\n                if (r.to > gapTo)\n                    copy.splice(j + 1, 0, new Range(gapTo, r.to));\n            }\n            else if (r.to > gapTo) {\n                copy[j--] = new Range(gapTo, r.to);\n            }\n            else {\n                copy.splice(j--, 1);\n            }\n        }\n    }\n    return current;\n}\nfunction findCoverChanges(a, b, from, to) {\n    let iA = 0, iB = 0, inA = false, inB = false, pos = -1e9;\n    let result = [];\n    for (;;) {\n        let nextA = iA == a.length ? 1e9 : inA ? a[iA].to : a[iA].from;\n        let nextB = iB == b.length ? 1e9 : inB ? b[iB].to : b[iB].from;\n        if (inA != inB) {\n            let start = Math.max(pos, from), end = Math.min(nextA, nextB, to);\n            if (start < end)\n                result.push(new Range(start, end));\n        }\n        pos = Math.min(nextA, nextB);\n        if (pos == 1e9)\n            break;\n        if (nextA == pos) {\n            if (!inA)\n                inA = true;\n            else {\n                inA = false;\n                iA++;\n            }\n        }\n        if (nextB == pos) {\n            if (!inB)\n                inB = true;\n            else {\n                inB = false;\n                iB++;\n            }\n        }\n    }\n    return result;\n}\n// Given a number of fragments for the outer tree, and a set of ranges\n// to parse, find fragments for inner trees mounted around those\n// ranges, if any.\nfunction enterFragments(mounts, ranges) {\n    let result = [];\n    for (let { pos, mount, frag } of mounts) {\n        let startPos = pos + (mount.overlay ? mount.overlay[0].from : 0), endPos = startPos + mount.tree.length;\n        let from = Math.max(frag.from, startPos), to = Math.min(frag.to, endPos);\n        if (mount.overlay) {\n            let overlay = mount.overlay.map(r => new Range(r.from + pos, r.to + pos));\n            let changes = findCoverChanges(ranges, overlay, from, to);\n            for (let i = 0, pos = from;; i++) {\n                let last = i == changes.length, end = last ? to : changes[i].from;\n                if (end > pos)\n                    result.push(new TreeFragment(pos, end, mount.tree, -startPos, frag.from >= pos || frag.openStart, frag.to <= end || frag.openEnd));\n                if (last)\n                    break;\n                pos = changes[i].to;\n            }\n        }\n        else {\n            result.push(new TreeFragment(from, to, mount.tree, -startPos, frag.from >= startPos || frag.openStart, frag.to <= endPos || frag.openEnd));\n        }\n    }\n    return result;\n}\n\nexport { DefaultBufferLength, IterMode, MountedTree, NodeProp, NodeSet, NodeType, NodeWeakMap, Parser, Tree, TreeBuffer, TreeCursor, TreeFragment, parseMixed };\n","import { NodeProp } from '@lezer/common';\n\nlet nextTagID = 0;\n/**\nHighlighting tags are markers that denote a highlighting category.\nThey are [associated](#highlight.styleTags) with parts of a syntax\ntree by a language mode, and then mapped to an actual CSS style by\na [highlighter](#highlight.Highlighter).\n\nBecause syntax tree node types and highlight styles have to be\nable to talk the same language, CodeMirror uses a mostly _closed_\n[vocabulary](#highlight.tags) of syntax tags (as opposed to\ntraditional open string-based systems, which make it hard for\nhighlighting themes to cover all the tokens produced by the\nvarious languages).\n\nIt _is_ possible to [define](#highlight.Tag^define) your own\nhighlighting tags for system-internal use (where you control both\nthe language package and the highlighter), but such tags will not\nbe picked up by regular highlighters (though you can derive them\nfrom standard tags to allow highlighters to fall back to those).\n*/\nclass Tag {\n    /**\n    @internal\n    */\n    constructor(\n    /**\n    The set of this tag and all its parent tags, starting with\n    this one itself and sorted in order of decreasing specificity.\n    */\n    set, \n    /**\n    The base unmodified tag that this one is based on, if it's\n    modified @internal\n    */\n    base, \n    /**\n    The modifiers applied to this.base @internal\n    */\n    modified) {\n        this.set = set;\n        this.base = base;\n        this.modified = modified;\n        /**\n        @internal\n        */\n        this.id = nextTagID++;\n    }\n    /**\n    Define a new tag. If `parent` is given, the tag is treated as a\n    sub-tag of that parent, and\n    [highlighters](#highlight.tagHighlighter) that don't mention\n    this tag will try to fall back to the parent tag (or grandparent\n    tag, etc).\n    */\n    static define(parent) {\n        if (parent === null || parent === void 0 ? void 0 : parent.base)\n            throw new Error(\"Can not derive from a modified tag\");\n        let tag = new Tag([], null, []);\n        tag.set.push(tag);\n        if (parent)\n            for (let t of parent.set)\n                tag.set.push(t);\n        return tag;\n    }\n    /**\n    Define a tag _modifier_, which is a function that, given a tag,\n    will return a tag that is a subtag of the original. Applying the\n    same modifier to a twice tag will return the same value (`m1(t1)\n    == m1(t1)`) and applying multiple modifiers will, regardless or\n    order, produce the same tag (`m1(m2(t1)) == m2(m1(t1))`).\n    \n    When multiple modifiers are applied to a given base tag, each\n    smaller set of modifiers is registered as a parent, so that for\n    example `m1(m2(m3(t1)))` is a subtype of `m1(m2(t1))`,\n    `m1(m3(t1)`, and so on.\n    */\n    static defineModifier() {\n        let mod = new Modifier;\n        return (tag) => {\n            if (tag.modified.indexOf(mod) > -1)\n                return tag;\n            return Modifier.get(tag.base || tag, tag.modified.concat(mod).sort((a, b) => a.id - b.id));\n        };\n    }\n}\nlet nextModifierID = 0;\nclass Modifier {\n    constructor() {\n        this.instances = [];\n        this.id = nextModifierID++;\n    }\n    static get(base, mods) {\n        if (!mods.length)\n            return base;\n        let exists = mods[0].instances.find(t => t.base == base && sameArray(mods, t.modified));\n        if (exists)\n            return exists;\n        let set = [], tag = new Tag(set, base, mods);\n        for (let m of mods)\n            m.instances.push(tag);\n        let configs = powerSet(mods);\n        for (let parent of base.set)\n            if (!parent.modified.length)\n                for (let config of configs)\n                    set.push(Modifier.get(parent, config));\n        return tag;\n    }\n}\nfunction sameArray(a, b) {\n    return a.length == b.length && a.every((x, i) => x == b[i]);\n}\nfunction powerSet(array) {\n    let sets = [[]];\n    for (let i = 0; i < array.length; i++) {\n        for (let j = 0, e = sets.length; j < e; j++) {\n            sets.push(sets[j].concat(array[i]));\n        }\n    }\n    return sets.sort((a, b) => b.length - a.length);\n}\n/**\nThis function is used to add a set of tags to a language syntax\nvia [`NodeSet.extend`](#common.NodeSet.extend) or\n[`LRParser.configure`](#lr.LRParser.configure).\n\nThe argument object maps node selectors to [highlighting\ntags](#highlight.Tag) or arrays of tags.\n\nNode selectors may hold one or more (space-separated) node paths.\nSuch a path can be a [node name](#common.NodeType.name), or\nmultiple node names (or `*` wildcards) separated by slash\ncharacters, as in `\"Block/Declaration/VariableName\"`. Such a path\nmatches the final node but only if its direct parent nodes are the\nother nodes mentioned. A `*` in such a path matches any parent,\nbut only a single level—wildcards that match multiple parents\naren't supported, both for efficiency reasons and because Lezer\ntrees make it rather hard to reason about what they would match.)\n\nA path can be ended with `/...` to indicate that the tag assigned\nto the node should also apply to all child nodes, even if they\nmatch their own style (by default, only the innermost style is\nused).\n\nWhen a path ends in `!`, as in `Attribute!`, no further matching\nhappens for the node's child nodes, and the entire node gets the\ngiven style.\n\nIn this notation, node names that contain `/`, `!`, `*`, or `...`\nmust be quoted as JSON strings.\n\nFor example:\n\n```javascript\nparser.withProps(\n  styleTags({\n    // Style Number and BigNumber nodes\n    \"Number BigNumber\": tags.number,\n    // Style Escape nodes whose parent is String\n    \"String/Escape\": tags.escape,\n    // Style anything inside Attributes nodes\n    \"Attributes!\": tags.meta,\n    // Add a style to all content inside Italic nodes\n    \"Italic/...\": tags.emphasis,\n    // Style InvalidString nodes as both `string` and `invalid`\n    \"InvalidString\": [tags.string, tags.invalid],\n    // Style the node named \"/\" as punctuation\n    '\"/\"': tags.punctuation\n  })\n)\n```\n*/\nfunction styleTags(spec) {\n    let byName = Object.create(null);\n    for (let prop in spec) {\n        let tags = spec[prop];\n        if (!Array.isArray(tags))\n            tags = [tags];\n        for (let part of prop.split(\" \"))\n            if (part) {\n                let pieces = [], mode = 2 /* Normal */, rest = part;\n                for (let pos = 0;;) {\n                    if (rest == \"...\" && pos > 0 && pos + 3 == part.length) {\n                        mode = 1 /* Inherit */;\n                        break;\n                    }\n                    let m = /^\"(?:[^\"\\\\]|\\\\.)*?\"|[^\\/!]+/.exec(rest);\n                    if (!m)\n                        throw new RangeError(\"Invalid path: \" + part);\n                    pieces.push(m[0] == \"*\" ? \"\" : m[0][0] == '\"' ? JSON.parse(m[0]) : m[0]);\n                    pos += m[0].length;\n                    if (pos == part.length)\n                        break;\n                    let next = part[pos++];\n                    if (pos == part.length && next == \"!\") {\n                        mode = 0 /* Opaque */;\n                        break;\n                    }\n                    if (next != \"/\")\n                        throw new RangeError(\"Invalid path: \" + part);\n                    rest = part.slice(pos);\n                }\n                let last = pieces.length - 1, inner = pieces[last];\n                if (!inner)\n                    throw new RangeError(\"Invalid path: \" + part);\n                let rule = new Rule(tags, mode, last > 0 ? pieces.slice(0, last) : null);\n                byName[inner] = rule.sort(byName[inner]);\n            }\n    }\n    return ruleNodeProp.add(byName);\n}\nconst ruleNodeProp = new NodeProp();\nclass Rule {\n    constructor(tags, mode, context, next) {\n        this.tags = tags;\n        this.mode = mode;\n        this.context = context;\n        this.next = next;\n    }\n    get opaque() { return this.mode == 0 /* Opaque */; }\n    get inherit() { return this.mode == 1 /* Inherit */; }\n    sort(other) {\n        if (!other || other.depth < this.depth) {\n            this.next = other;\n            return this;\n        }\n        other.next = this.sort(other.next);\n        return other;\n    }\n    get depth() { return this.context ? this.context.length : 0; }\n}\nRule.empty = new Rule([], 2 /* Normal */, null);\n/**\nDefine a [highlighter](#highlight.Highlighter) from an array of\ntag/class pairs. Classes associated with more specific tags will\ntake precedence.\n*/\nfunction tagHighlighter(tags, options) {\n    let map = Object.create(null);\n    for (let style of tags) {\n        if (!Array.isArray(style.tag))\n            map[style.tag.id] = style.class;\n        else\n            for (let tag of style.tag)\n                map[tag.id] = style.class;\n    }\n    let { scope, all = null } = options || {};\n    return {\n        style: (tags) => {\n            let cls = all;\n            for (let tag of tags) {\n                for (let sub of tag.set) {\n                    let tagClass = map[sub.id];\n                    if (tagClass) {\n                        cls = cls ? cls + \" \" + tagClass : tagClass;\n                        break;\n                    }\n                }\n            }\n            return cls;\n        },\n        scope\n    };\n}\nfunction highlightTags(highlighters, tags) {\n    let result = null;\n    for (let highlighter of highlighters) {\n        let value = highlighter.style(tags);\n        if (value)\n            result = result ? result + \" \" + value : value;\n    }\n    return result;\n}\n/**\nHighlight the given [tree](#common.Tree) with the given\n[highlighter](#highlight.Highlighter).\n*/\nfunction highlightTree(tree, highlighter, \n/**\nAssign styling to a region of the text. Will be called, in order\nof position, for any ranges where more than zero classes apply.\n`classes` is a space separated string of CSS classes.\n*/\nputStyle, \n/**\nThe start of the range to highlight.\n*/\nfrom = 0, \n/**\nThe end of the range.\n*/\nto = tree.length) {\n    let builder = new HighlightBuilder(from, Array.isArray(highlighter) ? highlighter : [highlighter], putStyle);\n    builder.highlightRange(tree.cursor(), from, to, \"\", builder.highlighters);\n    builder.flush(to);\n}\nclass HighlightBuilder {\n    constructor(at, highlighters, span) {\n        this.at = at;\n        this.highlighters = highlighters;\n        this.span = span;\n        this.class = \"\";\n    }\n    startSpan(at, cls) {\n        if (cls != this.class) {\n            this.flush(at);\n            if (at > this.at)\n                this.at = at;\n            this.class = cls;\n        }\n    }\n    flush(to) {\n        if (to > this.at && this.class)\n            this.span(this.at, to, this.class);\n    }\n    highlightRange(cursor, from, to, inheritedClass, highlighters) {\n        let { type, from: start, to: end } = cursor;\n        if (start >= to || end <= from)\n            return;\n        if (type.isTop)\n            highlighters = this.highlighters.filter(h => !h.scope || h.scope(type));\n        let cls = inheritedClass;\n        let rule = getStyleTags(cursor) || Rule.empty;\n        let tagCls = highlightTags(highlighters, rule.tags);\n        if (tagCls) {\n            if (cls)\n                cls += \" \";\n            cls += tagCls;\n            if (rule.mode == 1 /* Inherit */)\n                inheritedClass += (inheritedClass ? \" \" : \"\") + tagCls;\n        }\n        this.startSpan(cursor.from, cls);\n        if (rule.opaque)\n            return;\n        let mounted = cursor.tree && cursor.tree.prop(NodeProp.mounted);\n        if (mounted && mounted.overlay) {\n            let inner = cursor.node.enter(mounted.overlay[0].from + start, 1);\n            let innerHighlighters = this.highlighters.filter(h => !h.scope || h.scope(mounted.tree.type));\n            let hasChild = cursor.firstChild();\n            for (let i = 0, pos = start;; i++) {\n                let next = i < mounted.overlay.length ? mounted.overlay[i] : null;\n                let nextPos = next ? next.from + start : end;\n                let rangeFrom = Math.max(from, pos), rangeTo = Math.min(to, nextPos);\n                if (rangeFrom < rangeTo && hasChild) {\n                    while (cursor.from < rangeTo) {\n                        this.highlightRange(cursor, rangeFrom, rangeTo, inheritedClass, highlighters);\n                        this.startSpan(Math.min(rangeTo, cursor.to), cls);\n                        if (cursor.to >= nextPos || !cursor.nextSibling())\n                            break;\n                    }\n                }\n                if (!next || nextPos > to)\n                    break;\n                pos = next.to + start;\n                if (pos > from) {\n                    this.highlightRange(inner.cursor(), Math.max(from, next.from + start), Math.min(to, pos), inheritedClass, innerHighlighters);\n                    this.startSpan(pos, cls);\n                }\n            }\n            if (hasChild)\n                cursor.parent();\n        }\n        else if (cursor.firstChild()) {\n            do {\n                if (cursor.to <= from)\n                    continue;\n                if (cursor.from >= to)\n                    break;\n                this.highlightRange(cursor, from, to, inheritedClass, highlighters);\n                this.startSpan(Math.min(to, cursor.to), cls);\n            } while (cursor.nextSibling());\n            cursor.parent();\n        }\n    }\n}\n/**\nMatch a syntax node's [highlight rules](#highlight.styleTags). If\nthere's a match, return its set of tags, and whether it is\nopaque (uses a `!`) or applies to all child nodes (`/...`).\n*/\nfunction getStyleTags(node) {\n    let rule = node.type.prop(ruleNodeProp);\n    while (rule && rule.context && !node.matchContext(rule.context))\n        rule = rule.next;\n    return rule || null;\n}\nconst t = Tag.define;\nconst comment = t(), name = t(), typeName = t(name), propertyName = t(name), literal = t(), string = t(literal), number = t(literal), content = t(), heading = t(content), keyword = t(), operator = t(), punctuation = t(), bracket = t(punctuation), meta = t();\n/**\nThe default set of highlighting [tags](#highlight.Tag).\n\nThis collection is heavily biased towards programming languages,\nand necessarily incomplete. A full ontology of syntactic\nconstructs would fill a stack of books, and be impractical to\nwrite themes for. So try to make do with this set. If all else\nfails, [open an\nissue](https://github.com/codemirror/codemirror.next) to propose a\nnew tag, or [define](#highlight.Tag^define) a local custom tag for\nyour use case.\n\nNote that it is not obligatory to always attach the most specific\ntag possible to an element—if your grammar can't easily\ndistinguish a certain type of element (such as a local variable),\nit is okay to style it as its more general variant (a variable).\n\nFor tags that extend some parent tag, the documentation links to\nthe parent.\n*/\nconst tags = {\n    /**\n    A comment.\n    */\n    comment,\n    /**\n    A line [comment](#highlight.tags.comment).\n    */\n    lineComment: t(comment),\n    /**\n    A block [comment](#highlight.tags.comment).\n    */\n    blockComment: t(comment),\n    /**\n    A documentation [comment](#highlight.tags.comment).\n    */\n    docComment: t(comment),\n    /**\n    Any kind of identifier.\n    */\n    name,\n    /**\n    The [name](#highlight.tags.name) of a variable.\n    */\n    variableName: t(name),\n    /**\n    A type [name](#highlight.tags.name).\n    */\n    typeName: typeName,\n    /**\n    A tag name (subtag of [`typeName`](#highlight.tags.typeName)).\n    */\n    tagName: t(typeName),\n    /**\n    A property or field [name](#highlight.tags.name).\n    */\n    propertyName: propertyName,\n    /**\n    An attribute name (subtag of [`propertyName`](#highlight.tags.propertyName)).\n    */\n    attributeName: t(propertyName),\n    /**\n    The [name](#highlight.tags.name) of a class.\n    */\n    className: t(name),\n    /**\n    A label [name](#highlight.tags.name).\n    */\n    labelName: t(name),\n    /**\n    A namespace [name](#highlight.tags.name).\n    */\n    namespace: t(name),\n    /**\n    The [name](#highlight.tags.name) of a macro.\n    */\n    macroName: t(name),\n    /**\n    A literal value.\n    */\n    literal,\n    /**\n    A string [literal](#highlight.tags.literal).\n    */\n    string,\n    /**\n    A documentation [string](#highlight.tags.string).\n    */\n    docString: t(string),\n    /**\n    A character literal (subtag of [string](#highlight.tags.string)).\n    */\n    character: t(string),\n    /**\n    An attribute value (subtag of [string](#highlight.tags.string)).\n    */\n    attributeValue: t(string),\n    /**\n    A number [literal](#highlight.tags.literal).\n    */\n    number,\n    /**\n    An integer [number](#highlight.tags.number) literal.\n    */\n    integer: t(number),\n    /**\n    A floating-point [number](#highlight.tags.number) literal.\n    */\n    float: t(number),\n    /**\n    A boolean [literal](#highlight.tags.literal).\n    */\n    bool: t(literal),\n    /**\n    Regular expression [literal](#highlight.tags.literal).\n    */\n    regexp: t(literal),\n    /**\n    An escape [literal](#highlight.tags.literal), for example a\n    backslash escape in a string.\n    */\n    escape: t(literal),\n    /**\n    A color [literal](#highlight.tags.literal).\n    */\n    color: t(literal),\n    /**\n    A URL [literal](#highlight.tags.literal).\n    */\n    url: t(literal),\n    /**\n    A language keyword.\n    */\n    keyword,\n    /**\n    The [keyword](#highlight.tags.keyword) for the self or this\n    object.\n    */\n    self: t(keyword),\n    /**\n    The [keyword](#highlight.tags.keyword) for null.\n    */\n    null: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) denoting some atomic value.\n    */\n    atom: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that represents a unit.\n    */\n    unit: t(keyword),\n    /**\n    A modifier [keyword](#highlight.tags.keyword).\n    */\n    modifier: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that acts as an operator.\n    */\n    operatorKeyword: t(keyword),\n    /**\n    A control-flow related [keyword](#highlight.tags.keyword).\n    */\n    controlKeyword: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) that defines something.\n    */\n    definitionKeyword: t(keyword),\n    /**\n    A [keyword](#highlight.tags.keyword) related to defining or\n    interfacing with modules.\n    */\n    moduleKeyword: t(keyword),\n    /**\n    An operator.\n    */\n    operator,\n    /**\n    An [operator](#highlight.tags.operator) that dereferences something.\n    */\n    derefOperator: t(operator),\n    /**\n    Arithmetic-related [operator](#highlight.tags.operator).\n    */\n    arithmeticOperator: t(operator),\n    /**\n    Logical [operator](#highlight.tags.operator).\n    */\n    logicOperator: t(operator),\n    /**\n    Bit [operator](#highlight.tags.operator).\n    */\n    bitwiseOperator: t(operator),\n    /**\n    Comparison [operator](#highlight.tags.operator).\n    */\n    compareOperator: t(operator),\n    /**\n    [Operator](#highlight.tags.operator) that updates its operand.\n    */\n    updateOperator: t(operator),\n    /**\n    [Operator](#highlight.tags.operator) that defines something.\n    */\n    definitionOperator: t(operator),\n    /**\n    Type-related [operator](#highlight.tags.operator).\n    */\n    typeOperator: t(operator),\n    /**\n    Control-flow [operator](#highlight.tags.operator).\n    */\n    controlOperator: t(operator),\n    /**\n    Program or markup punctuation.\n    */\n    punctuation,\n    /**\n    [Punctuation](#highlight.tags.punctuation) that separates\n    things.\n    */\n    separator: t(punctuation),\n    /**\n    Bracket-style [punctuation](#highlight.tags.punctuation).\n    */\n    bracket,\n    /**\n    Angle [brackets](#highlight.tags.bracket) (usually `<` and `>`\n    tokens).\n    */\n    angleBracket: t(bracket),\n    /**\n    Square [brackets](#highlight.tags.bracket) (usually `[` and `]`\n    tokens).\n    */\n    squareBracket: t(bracket),\n    /**\n    Parentheses (usually `(` and `)` tokens). Subtag of\n    [bracket](#highlight.tags.bracket).\n    */\n    paren: t(bracket),\n    /**\n    Braces (usually `{` and `}` tokens). Subtag of\n    [bracket](#highlight.tags.bracket).\n    */\n    brace: t(bracket),\n    /**\n    Content, for example plain text in XML or markup documents.\n    */\n    content,\n    /**\n    [Content](#highlight.tags.content) that represents a heading.\n    */\n    heading,\n    /**\n    A level 1 [heading](#highlight.tags.heading).\n    */\n    heading1: t(heading),\n    /**\n    A level 2 [heading](#highlight.tags.heading).\n    */\n    heading2: t(heading),\n    /**\n    A level 3 [heading](#highlight.tags.heading).\n    */\n    heading3: t(heading),\n    /**\n    A level 4 [heading](#highlight.tags.heading).\n    */\n    heading4: t(heading),\n    /**\n    A level 5 [heading](#highlight.tags.heading).\n    */\n    heading5: t(heading),\n    /**\n    A level 6 [heading](#highlight.tags.heading).\n    */\n    heading6: t(heading),\n    /**\n    A prose separator (such as a horizontal rule).\n    */\n    contentSeparator: t(content),\n    /**\n    [Content](#highlight.tags.content) that represents a list.\n    */\n    list: t(content),\n    /**\n    [Content](#highlight.tags.content) that represents a quote.\n    */\n    quote: t(content),\n    /**\n    [Content](#highlight.tags.content) that is emphasized.\n    */\n    emphasis: t(content),\n    /**\n    [Content](#highlight.tags.content) that is styled strong.\n    */\n    strong: t(content),\n    /**\n    [Content](#highlight.tags.content) that is part of a link.\n    */\n    link: t(content),\n    /**\n    [Content](#highlight.tags.content) that is styled as code or\n    monospace.\n    */\n    monospace: t(content),\n    /**\n    [Content](#highlight.tags.content) that has a strike-through\n    style.\n    */\n    strikethrough: t(content),\n    /**\n    Inserted text in a change-tracking format.\n    */\n    inserted: t(),\n    /**\n    Deleted text.\n    */\n    deleted: t(),\n    /**\n    Changed text.\n    */\n    changed: t(),\n    /**\n    An invalid or unsyntactic element.\n    */\n    invalid: t(),\n    /**\n    Metadata or meta-instruction.\n    */\n    meta,\n    /**\n    [Metadata](#highlight.tags.meta) that applies to the entire\n    document.\n    */\n    documentMeta: t(meta),\n    /**\n    [Metadata](#highlight.tags.meta) that annotates or adds\n    attributes to a given syntactic element.\n    */\n    annotation: t(meta),\n    /**\n    Processing instruction or preprocessor directive. Subtag of\n    [meta](#highlight.tags.meta).\n    */\n    processingInstruction: t(meta),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates that a\n    given element is being defined. Expected to be used with the\n    various [name](#highlight.tags.name) tags.\n    */\n    definition: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates that\n    something is constant. Mostly expected to be used with\n    [variable names](#highlight.tags.variableName).\n    */\n    constant: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) used to indicate that\n    a [variable](#highlight.tags.variableName) or [property\n    name](#highlight.tags.propertyName) is being called or defined\n    as a function.\n    */\n    function: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that can be applied to\n    [names](#highlight.tags.name) to indicate that they belong to\n    the language's standard environment.\n    */\n    standard: Tag.defineModifier(),\n    /**\n    [Modifier](#highlight.Tag^defineModifier) that indicates a given\n    [names](#highlight.tags.name) is local to some scope.\n    */\n    local: Tag.defineModifier(),\n    /**\n    A generic variant [modifier](#highlight.Tag^defineModifier) that\n    can be used to tag language-specific alternative variants of\n    some common tag. It is recommended for themes to define special\n    forms of at least the [string](#highlight.tags.string) and\n    [variable name](#highlight.tags.variableName) tags, since those\n    come up a lot.\n    */\n    special: Tag.defineModifier()\n};\n/**\nThis is a highlighter that adds stable, predictable classes to\ntokens, for styling with external CSS.\n\nThe following tags are mapped to their name prefixed with `\"tok-\"`\n(for example `\"tok-comment\"`):\n\n* [`link`](#highlight.tags.link)\n* [`heading`](#highlight.tags.heading)\n* [`emphasis`](#highlight.tags.emphasis)\n* [`strong`](#highlight.tags.strong)\n* [`keyword`](#highlight.tags.keyword)\n* [`atom`](#highlight.tags.atom)\n* [`bool`](#highlight.tags.bool)\n* [`url`](#highlight.tags.url)\n* [`labelName`](#highlight.tags.labelName)\n* [`inserted`](#highlight.tags.inserted)\n* [`deleted`](#highlight.tags.deleted)\n* [`literal`](#highlight.tags.literal)\n* [`string`](#highlight.tags.string)\n* [`number`](#highlight.tags.number)\n* [`variableName`](#highlight.tags.variableName)\n* [`typeName`](#highlight.tags.typeName)\n* [`namespace`](#highlight.tags.namespace)\n* [`className`](#highlight.tags.className)\n* [`macroName`](#highlight.tags.macroName)\n* [`propertyName`](#highlight.tags.propertyName)\n* [`operator`](#highlight.tags.operator)\n* [`comment`](#highlight.tags.comment)\n* [`meta`](#highlight.tags.meta)\n* [`punctuation`](#highlight.tags.punctuation)\n* [`invalid`](#highlight.tags.invalid)\n\nIn addition, these mappings are provided:\n\n* [`regexp`](#highlight.tags.regexp),\n  [`escape`](#highlight.tags.escape), and\n  [`special`](#highlight.tags.special)[`(string)`](#highlight.tags.string)\n  are mapped to `\"tok-string2\"`\n* [`special`](#highlight.tags.special)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName2\"`\n* [`local`](#highlight.tags.local)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName tok-local\"`\n* [`definition`](#highlight.tags.definition)[`(variableName)`](#highlight.tags.variableName)\n  to `\"tok-variableName tok-definition\"`\n* [`definition`](#highlight.tags.definition)[`(propertyName)`](#highlight.tags.propertyName)\n  to `\"tok-propertyName tok-definition\"`\n*/\nconst classHighlighter = tagHighlighter([\n    { tag: tags.link, class: \"tok-link\" },\n    { tag: tags.heading, class: \"tok-heading\" },\n    { tag: tags.emphasis, class: \"tok-emphasis\" },\n    { tag: tags.strong, class: \"tok-strong\" },\n    { tag: tags.keyword, class: \"tok-keyword\" },\n    { tag: tags.atom, class: \"tok-atom\" },\n    { tag: tags.bool, class: \"tok-bool\" },\n    { tag: tags.url, class: \"tok-url\" },\n    { tag: tags.labelName, class: \"tok-labelName\" },\n    { tag: tags.inserted, class: \"tok-inserted\" },\n    { tag: tags.deleted, class: \"tok-deleted\" },\n    { tag: tags.literal, class: \"tok-literal\" },\n    { tag: tags.string, class: \"tok-string\" },\n    { tag: tags.number, class: \"tok-number\" },\n    { tag: [tags.regexp, tags.escape, tags.special(tags.string)], class: \"tok-string2\" },\n    { tag: tags.variableName, class: \"tok-variableName\" },\n    { tag: tags.local(tags.variableName), class: \"tok-variableName tok-local\" },\n    { tag: tags.definition(tags.variableName), class: \"tok-variableName tok-definition\" },\n    { tag: tags.special(tags.variableName), class: \"tok-variableName2\" },\n    { tag: tags.definition(tags.propertyName), class: \"tok-propertyName tok-definition\" },\n    { tag: tags.typeName, class: \"tok-typeName\" },\n    { tag: tags.namespace, class: \"tok-namespace\" },\n    { tag: tags.className, class: \"tok-className\" },\n    { tag: tags.macroName, class: \"tok-macroName\" },\n    { tag: tags.propertyName, class: \"tok-propertyName\" },\n    { tag: tags.operator, class: \"tok-operator\" },\n    { tag: tags.comment, class: \"tok-comment\" },\n    { tag: tags.meta, class: \"tok-meta\" },\n    { tag: tags.invalid, class: \"tok-invalid\" },\n    { tag: tags.punctuation, class: \"tok-punctuation\" }\n]);\n\nexport { Tag, classHighlighter, getStyleTags, highlightTree, styleTags, tagHighlighter, tags };\n"],"names":["DefaultBufferLength","nextPropID","Range","from","to","NodeProp","config","match","NodeType","type","result","str","MountedTree","tree","overlay","parser","noProps","name","props","id","flags","spec","src","prop","group","map","direct","node","groups","i","found","NodeSet","types","newTypes","newProps","source","add","CachedNode","CachedInnerNode","IterMode","Tree","children","positions","length","value","mounted","ch","mode","TreeCursor","pos","side","scope","cursor","TreeNode","resolveNode","enter","leave","c","entered","balanceRange","data","buildTree","FlatBufferCursor","buffer","index","TreeBuffer","set","endIndex","startIndex","dir","pick","checkSide","startI","endI","b","copy","len","j","enterUnfinishedNodesBefore","scan","last","overlays","_a","parent","inner","_tree","_parent","e","next","start","BufferNode","BufferContext","hasChild","rPos","val","before","after","r","getChildren","context","matchNodeContext","cur","p","parentStart","n","d","child","cache","depth","mustLeave","nodeSet","maxBufferLength","reused","minRepeatType","contextHash","lookAhead","takeNode","minPos","inRepeat","end","size","lookAheadAtStart","startPos","findBufferSize","endPos","copyToBuffer","localChildren","localPositions","localInRepeat","lastGroup","lastEnd","makeRepeatLeaf","make","makeBalanced","makeTree","lastI","lookAheadProp","base","pair","maxSize","fork","skip","minStart","nodeSize","localSkipped","nodeStart","bufferStart","nodeSizeCache","balanceType","mkTop","mkTree","total","maxChild","divide","offset","groupFrom","groupStart","groupSize","nextSize","only","NodeWeakMap","TreeFragment","openStart","openEnd","fragments","partial","f","changes","minGap","fI","nextF","cI","off","nextC","nextPos","cut","fFrom","fTo","Parser","input","ranges","StringInput","parse","done","string","parseMixed","nest","MixedParse","InnerParse","target","ActiveOverlay","predicate","mounts","prev","stoppedInner","fragmentCursor","FragmentCursor","covered","isCovered","range","m","checkCover","materialize","oldMounts","punchRanges","enterFragments","sliceBuf","buf","nodes","split","innerOffset","isTarget","StructureCursor","root","first","frag","mount","outer","current","gapFrom","gapTo","findCoverChanges","a","iA","iB","inA","inB","nextA","nextB","nextTagID","Tag","modified","tag","t","mod","Modifier","nextModifierID","mods","exists","sameArray","configs","powerSet","x","array","sets","styleTags","byName","tags","part","pieces","rest","rule","Rule","ruleNodeProp","other","tagHighlighter","options","style","all","cls","sub","tagClass","highlightTags","highlighters","highlighter","highlightTree","putStyle","builder","HighlightBuilder","at","span","inheritedClass","h","getStyleTags","tagCls","innerHighlighters","rangeFrom","rangeTo","comment","typeName","propertyName","literal","number","content","heading","keyword","operator","punctuation","bracket","meta","classHighlighter"],"sourceRoot":""}